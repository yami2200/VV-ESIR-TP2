digraph G {
deleteCharAt;
toCharArray;
setCharAt;
replace;
toStringBuilder;
appendWithSeparators;
trim;
asTokenizer;
minimizeCapacity;
equalsIgnoreCase;
indexOf;
setNullText;
readFrom;
appendFixedWidthPadLeft;
appendSeparator;
setLength;
contains;
size;
endsWith;
leftString;
appendNull;
isNotEmpty;
ensureCapacity;
toStringBuffer;
setNewLineText;
appendNewLine;
insert;
replaceFirst;
rightString;
delete;
replaceAll;
substring;
capacity;
midString;
getNewLineText;
hashCode;
appendTo;
getChars;
appendAll;
length;
isEmpty;
clear;
deleteAll;
asWriter;
subSequence;
reverse;
appendln;
lastIndexOf;
getNullText;
build;
appendFixedWidthPadRight;
equals;
deleteFirst;
toString;
appendPadding;
asReader;
charAt;
append;
startsWith;
deleteCharAt -> setCharAt [label=" size", dir=none];
deleteCharAt -> replaceFirst [label=" size", dir=none];
deleteCharAt -> rightString [label=" size", dir=none];
deleteCharAt -> toStringBuilder [label=" size", dir=none];
deleteCharAt -> replaceAll [label=" size", dir=none];
deleteCharAt -> appendWithSeparators [label=" size", dir=none];
deleteCharAt -> midString [label=" size", dir=none];
deleteCharAt -> trim [label=" size", dir=none];
deleteCharAt -> hashCode [label=" size", dir=none];
deleteCharAt -> appendTo [label=" size", dir=none];
deleteCharAt -> minimizeCapacity [label=" size", dir=none];
deleteCharAt -> equalsIgnoreCase [label=" size", dir=none];
deleteCharAt -> indexOf [label=" size", dir=none];
deleteCharAt -> setNullText [label=" size", dir=none];
deleteCharAt -> readFrom [label=" size", dir=none];
deleteCharAt -> getChars [label=" size", dir=none];
deleteCharAt -> length [label=" size", dir=none];
deleteCharAt -> isEmpty [label=" size", dir=none];
deleteCharAt -> clear [label=" size", dir=none];
deleteCharAt -> deleteAll [label=" size", dir=none];
deleteCharAt -> subSequence [label=" size", dir=none];
deleteCharAt -> reverse [label=" size", dir=none];
deleteCharAt -> lastIndexOf [label=" size", dir=none];
deleteCharAt -> setLength [label=" size", dir=none];
deleteCharAt -> contains [label=" size", dir=none];
deleteCharAt -> size [label=" size", dir=none];
deleteCharAt -> build [label=" size", dir=none];
deleteCharAt -> endsWith [label=" size", dir=none];
deleteCharAt -> leftString [label=" size", dir=none];
deleteCharAt -> deleteFirst [label=" size", dir=none];
deleteCharAt -> isNotEmpty [label=" size", dir=none];
deleteCharAt -> toString [label=" size", dir=none];
deleteCharAt -> ensureCapacity [label=" size", dir=none];
deleteCharAt -> appendPadding [label=" size", dir=none];
deleteCharAt -> toStringBuffer [label=" size", dir=none];
deleteCharAt -> charAt [label=" size", dir=none];
deleteCharAt -> startsWith [label=" size", dir=none];
toCharArray -> setCharAt [label=" buffer", dir=none];
toCharArray -> rightString [label=" buffer", dir=none];
toCharArray -> toStringBuilder [label=" buffer", dir=none];
toCharArray -> substring [label=" buffer", dir=none];
toCharArray -> appendWithSeparators [label=" buffer", dir=none];
toCharArray -> capacity [label=" buffer", dir=none];
toCharArray -> midString [label=" buffer", dir=none];
toCharArray -> trim [label=" buffer", dir=none];
toCharArray -> hashCode [label=" buffer", dir=none];
toCharArray -> appendTo [label=" buffer", dir=none];
toCharArray -> minimizeCapacity [label=" buffer", dir=none];
toCharArray -> indexOf [label=" buffer", dir=none];
toCharArray -> readFrom [label=" buffer", dir=none];
toCharArray -> getChars [label=" buffer", dir=none];
toCharArray -> subSequence [label=" buffer", dir=none];
toCharArray -> reverse [label=" buffer", dir=none];
toCharArray -> lastIndexOf [label=" buffer", dir=none];
toCharArray -> setLength [label=" buffer", dir=none];
toCharArray -> contains [label=" buffer", dir=none];
toCharArray -> build [label=" buffer", dir=none];
toCharArray -> endsWith [label=" buffer", dir=none];
toCharArray -> leftString [label=" buffer", dir=none];
toCharArray -> toString [label=" buffer", dir=none];
toCharArray -> ensureCapacity [label=" buffer", dir=none];
toCharArray -> appendPadding [label=" buffer", dir=none];
toCharArray -> toStringBuffer [label=" buffer", dir=none];
toCharArray -> charAt [label=" buffer", dir=none];
toCharArray -> startsWith [label=" buffer", dir=none];
setNewLineText -> appendln [label=" newLine", dir=none];
setNewLineText -> getNewLineText [label=" newLine", dir=none];
setNewLineText -> appendNewLine [label=" newLine", dir=none];
setCharAt -> replaceFirst [label=" size", dir=none];
setCharAt -> rightString [label=" size, buffer", dir=none];
setCharAt -> toStringBuilder [label=" size, buffer", dir=none];
setCharAt -> replaceAll [label=" size", dir=none];
setCharAt -> substring [label=" buffer", dir=none];
setCharAt -> appendWithSeparators [label=" size, buffer", dir=none];
setCharAt -> capacity [label=" buffer", dir=none];
setCharAt -> midString [label=" size, buffer", dir=none];
setCharAt -> trim [label=" size, buffer", dir=none];
setCharAt -> hashCode [label=" size, buffer", dir=none];
setCharAt -> appendTo [label=" size, buffer", dir=none];
setCharAt -> minimizeCapacity [label=" size, buffer", dir=none];
setCharAt -> equalsIgnoreCase [label=" size", dir=none];
setCharAt -> indexOf [label=" size, buffer", dir=none];
setCharAt -> setNullText [label=" size", dir=none];
setCharAt -> readFrom [label=" size, buffer", dir=none];
setCharAt -> getChars [label=" size, buffer", dir=none];
setCharAt -> length [label=" size", dir=none];
setCharAt -> isEmpty [label=" size", dir=none];
setCharAt -> clear [label=" size", dir=none];
setCharAt -> deleteAll [label=" size", dir=none];
setCharAt -> subSequence [label=" size, buffer", dir=none];
setCharAt -> reverse [label=" size, buffer", dir=none];
setCharAt -> lastIndexOf [label=" size, buffer", dir=none];
setCharAt -> setLength [label=" size, buffer", dir=none];
setCharAt -> contains [label=" size, buffer", dir=none];
setCharAt -> size [label=" size", dir=none];
setCharAt -> build [label=" size, buffer", dir=none];
setCharAt -> endsWith [label=" size, buffer", dir=none];
setCharAt -> leftString [label=" size, buffer", dir=none];
setCharAt -> deleteFirst [label=" size", dir=none];
setCharAt -> isNotEmpty [label=" size", dir=none];
setCharAt -> toString [label=" size, buffer", dir=none];
setCharAt -> ensureCapacity [label=" size, buffer", dir=none];
setCharAt -> appendPadding [label=" size, buffer", dir=none];
setCharAt -> toStringBuffer [label=" size, buffer", dir=none];
setCharAt -> charAt [label=" size, buffer", dir=none];
setCharAt -> startsWith [label=" size, buffer", dir=none];
appendNewLine -> appendln [label=" newLine", dir=none];
appendNewLine -> getNewLineText [label=" newLine", dir=none];
replaceFirst -> getChars [label=" size", dir=none];
replaceFirst -> length [label=" size", dir=none];
replaceFirst -> isEmpty [label=" size", dir=none];
replaceFirst -> clear [label=" size", dir=none];
replaceFirst -> deleteAll [label=" size", dir=none];
replaceFirst -> rightString [label=" size", dir=none];
replaceFirst -> subSequence [label=" size", dir=none];
replaceFirst -> reverse [label=" size", dir=none];
replaceFirst -> replaceAll [label=" size", dir=none];
replaceFirst -> midString [label=" size", dir=none];
replaceFirst -> lastIndexOf [label=" size", dir=none];
replaceFirst -> build [label=" size", dir=none];
replaceFirst -> hashCode [label=" size", dir=none];
replaceFirst -> appendTo [label=" size", dir=none];
replaceFirst -> deleteFirst [label=" size", dir=none];
replaceFirst -> toString [label=" size", dir=none];
replaceFirst -> appendPadding [label=" size", dir=none];
replaceFirst -> charAt [label=" size", dir=none];
replaceFirst -> startsWith [label=" size", dir=none];
rightString -> getChars [label=" size, buffer", dir=none];
rightString -> length [label=" size", dir=none];
rightString -> isEmpty [label=" size", dir=none];
rightString -> clear [label=" size", dir=none];
rightString -> deleteAll [label=" size", dir=none];
rightString -> subSequence [label=" size, buffer", dir=none];
rightString -> reverse [label=" size, buffer", dir=none];
rightString -> replaceAll [label=" size", dir=none];
rightString -> substring [label=" buffer", dir=none];
rightString -> capacity [label=" buffer", dir=none];
rightString -> midString [label=" size, buffer", dir=none];
rightString -> lastIndexOf [label=" size, buffer", dir=none];
rightString -> build [label=" size, buffer", dir=none];
rightString -> hashCode [label=" size, buffer", dir=none];
rightString -> appendTo [label=" size, buffer", dir=none];
rightString -> deleteFirst [label=" size", dir=none];
rightString -> toString [label=" size, buffer", dir=none];
rightString -> appendPadding [label=" size, buffer", dir=none];
rightString -> charAt [label=" size, buffer", dir=none];
rightString -> startsWith [label=" size, buffer", dir=none];
toStringBuilder -> replaceFirst [label=" size", dir=none];
toStringBuilder -> rightString [label=" size, buffer", dir=none];
toStringBuilder -> replaceAll [label=" size", dir=none];
toStringBuilder -> substring [label=" buffer", dir=none];
toStringBuilder -> appendWithSeparators [label=" size, buffer", dir=none];
toStringBuilder -> capacity [label=" buffer", dir=none];
toStringBuilder -> midString [label=" size, buffer", dir=none];
toStringBuilder -> trim [label=" size, buffer", dir=none];
toStringBuilder -> hashCode [label=" size, buffer", dir=none];
toStringBuilder -> appendTo [label=" size, buffer", dir=none];
toStringBuilder -> minimizeCapacity [label=" size, buffer", dir=none];
toStringBuilder -> equalsIgnoreCase [label=" size", dir=none];
toStringBuilder -> indexOf [label=" size, buffer", dir=none];
toStringBuilder -> setNullText [label=" size", dir=none];
toStringBuilder -> readFrom [label=" size, buffer", dir=none];
toStringBuilder -> getChars [label=" size, buffer", dir=none];
toStringBuilder -> length [label=" size", dir=none];
toStringBuilder -> isEmpty [label=" size", dir=none];
toStringBuilder -> clear [label=" size", dir=none];
toStringBuilder -> deleteAll [label=" size", dir=none];
toStringBuilder -> subSequence [label=" size, buffer", dir=none];
toStringBuilder -> reverse [label=" size, buffer", dir=none];
toStringBuilder -> lastIndexOf [label=" size, buffer", dir=none];
toStringBuilder -> setLength [label=" size, buffer", dir=none];
toStringBuilder -> contains [label=" size, buffer", dir=none];
toStringBuilder -> size [label=" size", dir=none];
toStringBuilder -> build [label=" size, buffer", dir=none];
toStringBuilder -> endsWith [label=" size, buffer", dir=none];
toStringBuilder -> leftString [label=" size, buffer", dir=none];
toStringBuilder -> deleteFirst [label=" size", dir=none];
toStringBuilder -> isNotEmpty [label=" size", dir=none];
toStringBuilder -> toString [label=" size, buffer", dir=none];
toStringBuilder -> ensureCapacity [label=" size, buffer", dir=none];
toStringBuilder -> appendPadding [label=" size, buffer", dir=none];
toStringBuilder -> toStringBuffer [label=" size, buffer", dir=none];
toStringBuilder -> charAt [label=" size, buffer", dir=none];
toStringBuilder -> startsWith [label=" size, buffer", dir=none];
replaceAll -> getChars [label=" size", dir=none];
replaceAll -> length [label=" size", dir=none];
replaceAll -> isEmpty [label=" size", dir=none];
replaceAll -> clear [label=" size", dir=none];
replaceAll -> deleteAll [label=" size", dir=none];
replaceAll -> subSequence [label=" size", dir=none];
replaceAll -> reverse [label=" size", dir=none];
replaceAll -> midString [label=" size", dir=none];
replaceAll -> lastIndexOf [label=" size", dir=none];
replaceAll -> build [label=" size", dir=none];
replaceAll -> hashCode [label=" size", dir=none];
replaceAll -> appendTo [label=" size", dir=none];
replaceAll -> deleteFirst [label=" size", dir=none];
replaceAll -> toString [label=" size", dir=none];
replaceAll -> appendPadding [label=" size", dir=none];
replaceAll -> charAt [label=" size", dir=none];
replaceAll -> startsWith [label=" size", dir=none];
substring -> getChars [label=" buffer", dir=none];
substring -> subSequence [label=" buffer", dir=none];
substring -> reverse [label=" buffer", dir=none];
substring -> capacity [label=" buffer", dir=none];
substring -> midString [label=" buffer", dir=none];
substring -> lastIndexOf [label=" buffer", dir=none];
substring -> build [label=" buffer", dir=none];
substring -> hashCode [label=" buffer", dir=none];
substring -> appendTo [label=" buffer", dir=none];
substring -> toString [label=" buffer", dir=none];
substring -> appendPadding [label=" buffer", dir=none];
substring -> charAt [label=" buffer", dir=none];
substring -> startsWith [label=" buffer", dir=none];
appendWithSeparators -> replaceFirst [label=" size", dir=none];
appendWithSeparators -> rightString [label=" size, buffer", dir=none];
appendWithSeparators -> replaceAll [label=" size", dir=none];
appendWithSeparators -> substring [label=" buffer", dir=none];
appendWithSeparators -> capacity [label=" buffer", dir=none];
appendWithSeparators -> midString [label=" size, buffer", dir=none];
appendWithSeparators -> trim [label=" size, buffer", dir=none];
appendWithSeparators -> hashCode [label=" size, buffer", dir=none];
appendWithSeparators -> appendTo [label=" size, buffer", dir=none];
appendWithSeparators -> minimizeCapacity [label=" size, buffer", dir=none];
appendWithSeparators -> equalsIgnoreCase [label=" size", dir=none];
appendWithSeparators -> indexOf [label=" size, buffer", dir=none];
appendWithSeparators -> setNullText [label=" size", dir=none];
appendWithSeparators -> readFrom [label=" size, buffer", dir=none];
appendWithSeparators -> getChars [label=" size, buffer", dir=none];
appendWithSeparators -> length [label=" size", dir=none];
appendWithSeparators -> isEmpty [label=" size", dir=none];
appendWithSeparators -> clear [label=" size", dir=none];
appendWithSeparators -> deleteAll [label=" size", dir=none];
appendWithSeparators -> subSequence [label=" size, buffer", dir=none];
appendWithSeparators -> reverse [label=" size, buffer", dir=none];
appendWithSeparators -> lastIndexOf [label=" size, buffer", dir=none];
appendWithSeparators -> setLength [label=" size, buffer", dir=none];
appendWithSeparators -> contains [label=" size, buffer", dir=none];
appendWithSeparators -> size [label=" size", dir=none];
appendWithSeparators -> build [label=" size, buffer", dir=none];
appendWithSeparators -> endsWith [label=" size, buffer", dir=none];
appendWithSeparators -> leftString [label=" size, buffer", dir=none];
appendWithSeparators -> deleteFirst [label=" size", dir=none];
appendWithSeparators -> isNotEmpty [label=" size", dir=none];
appendWithSeparators -> toString [label=" size, buffer", dir=none];
appendWithSeparators -> ensureCapacity [label=" size, buffer", dir=none];
appendWithSeparators -> appendPadding [label=" size, buffer", dir=none];
appendWithSeparators -> toStringBuffer [label=" size, buffer", dir=none];
appendWithSeparators -> charAt [label=" size, buffer", dir=none];
appendWithSeparators -> startsWith [label=" size, buffer", dir=none];
capacity -> midString [label=" buffer", dir=none];
capacity -> lastIndexOf [label=" buffer", dir=none];
capacity -> build [label=" buffer", dir=none];
capacity -> hashCode [label=" buffer", dir=none];
capacity -> getChars [label=" buffer", dir=none];
capacity -> appendTo [label=" buffer", dir=none];
capacity -> toString [label=" buffer", dir=none];
capacity -> subSequence [label=" buffer", dir=none];
capacity -> reverse [label=" buffer", dir=none];
capacity -> appendPadding [label=" buffer", dir=none];
capacity -> charAt [label=" buffer", dir=none];
capacity -> startsWith [label=" buffer", dir=none];
midString -> getChars [label=" size, buffer", dir=none];
midString -> length [label=" size", dir=none];
midString -> isEmpty [label=" size", dir=none];
midString -> clear [label=" size", dir=none];
midString -> deleteAll [label=" size", dir=none];
midString -> subSequence [label=" size, buffer", dir=none];
midString -> reverse [label=" size, buffer", dir=none];
midString -> lastIndexOf [label=" size, buffer", dir=none];
midString -> build [label=" size, buffer", dir=none];
midString -> hashCode [label=" size, buffer", dir=none];
midString -> appendTo [label=" size, buffer", dir=none];
midString -> deleteFirst [label=" size", dir=none];
midString -> toString [label=" size, buffer", dir=none];
midString -> appendPadding [label=" size, buffer", dir=none];
midString -> charAt [label=" size, buffer", dir=none];
midString -> startsWith [label=" size, buffer", dir=none];
getNewLineText -> appendln [label=" newLine", dir=none];
trim -> replaceFirst [label=" size", dir=none];
trim -> rightString [label=" size, buffer", dir=none];
trim -> replaceAll [label=" size", dir=none];
trim -> substring [label=" buffer", dir=none];
trim -> capacity [label=" buffer", dir=none];
trim -> midString [label=" size, buffer", dir=none];
trim -> hashCode [label=" size, buffer", dir=none];
trim -> appendTo [label=" size, buffer", dir=none];
trim -> minimizeCapacity [label=" size, buffer", dir=none];
trim -> equalsIgnoreCase [label=" size", dir=none];
trim -> indexOf [label=" size, buffer", dir=none];
trim -> setNullText [label=" size", dir=none];
trim -> readFrom [label=" size, buffer", dir=none];
trim -> getChars [label=" size, buffer", dir=none];
trim -> length [label=" size", dir=none];
trim -> isEmpty [label=" size", dir=none];
trim -> clear [label=" size", dir=none];
trim -> deleteAll [label=" size", dir=none];
trim -> subSequence [label=" size, buffer", dir=none];
trim -> reverse [label=" size, buffer", dir=none];
trim -> lastIndexOf [label=" size, buffer", dir=none];
trim -> setLength [label=" size, buffer", dir=none];
trim -> contains [label=" size, buffer", dir=none];
trim -> size [label=" size", dir=none];
trim -> build [label=" size, buffer", dir=none];
trim -> endsWith [label=" size, buffer", dir=none];
trim -> leftString [label=" size, buffer", dir=none];
trim -> deleteFirst [label=" size", dir=none];
trim -> isNotEmpty [label=" size", dir=none];
trim -> toString [label=" size, buffer", dir=none];
trim -> ensureCapacity [label=" size, buffer", dir=none];
trim -> appendPadding [label=" size, buffer", dir=none];
trim -> toStringBuffer [label=" size, buffer", dir=none];
trim -> charAt [label=" size, buffer", dir=none];
trim -> startsWith [label=" size, buffer", dir=none];
hashCode -> getChars [label=" size, buffer", dir=none];
hashCode -> length [label=" size", dir=none];
hashCode -> isEmpty [label=" size", dir=none];
hashCode -> clear [label=" size", dir=none];
hashCode -> deleteAll [label=" size", dir=none];
hashCode -> subSequence [label=" size, buffer", dir=none];
hashCode -> reverse [label=" size, buffer", dir=none];
hashCode -> lastIndexOf [label=" size, buffer", dir=none];
hashCode -> build [label=" size, buffer", dir=none];
hashCode -> appendTo [label=" size, buffer", dir=none];
hashCode -> deleteFirst [label=" size", dir=none];
hashCode -> toString [label=" size, buffer", dir=none];
hashCode -> appendPadding [label=" size, buffer", dir=none];
hashCode -> charAt [label=" size, buffer", dir=none];
hashCode -> startsWith [label=" size, buffer", dir=none];
appendTo -> getChars [label=" size, buffer", dir=none];
appendTo -> length [label=" size", dir=none];
appendTo -> isEmpty [label=" size", dir=none];
appendTo -> clear [label=" size", dir=none];
appendTo -> deleteAll [label=" size", dir=none];
appendTo -> subSequence [label=" size, buffer", dir=none];
appendTo -> reverse [label=" size, buffer", dir=none];
appendTo -> lastIndexOf [label=" size, buffer", dir=none];
appendTo -> build [label=" size, buffer", dir=none];
appendTo -> deleteFirst [label=" size", dir=none];
appendTo -> toString [label=" size, buffer", dir=none];
appendTo -> appendPadding [label=" size, buffer", dir=none];
appendTo -> charAt [label=" size, buffer", dir=none];
appendTo -> startsWith [label=" size, buffer", dir=none];
minimizeCapacity -> replaceFirst [label=" size", dir=none];
minimizeCapacity -> rightString [label=" size, buffer", dir=none];
minimizeCapacity -> replaceAll [label=" size", dir=none];
minimizeCapacity -> substring [label=" buffer", dir=none];
minimizeCapacity -> capacity [label=" buffer", dir=none];
minimizeCapacity -> midString [label=" size, buffer", dir=none];
minimizeCapacity -> hashCode [label=" size, buffer", dir=none];
minimizeCapacity -> appendTo [label=" size, buffer", dir=none];
minimizeCapacity -> equalsIgnoreCase [label=" size", dir=none];
minimizeCapacity -> indexOf [label=" size, buffer", dir=none];
minimizeCapacity -> setNullText [label=" size", dir=none];
minimizeCapacity -> readFrom [label=" size, buffer", dir=none];
minimizeCapacity -> getChars [label=" size, buffer", dir=none];
minimizeCapacity -> length [label=" size", dir=none];
minimizeCapacity -> isEmpty [label=" size", dir=none];
minimizeCapacity -> clear [label=" size", dir=none];
minimizeCapacity -> deleteAll [label=" size", dir=none];
minimizeCapacity -> subSequence [label=" size, buffer", dir=none];
minimizeCapacity -> reverse [label=" size, buffer", dir=none];
minimizeCapacity -> lastIndexOf [label=" size, buffer", dir=none];
minimizeCapacity -> setLength [label=" size, buffer", dir=none];
minimizeCapacity -> contains [label=" size, buffer", dir=none];
minimizeCapacity -> size [label=" size", dir=none];
minimizeCapacity -> build [label=" size, buffer", dir=none];
minimizeCapacity -> endsWith [label=" size, buffer", dir=none];
minimizeCapacity -> leftString [label=" size, buffer", dir=none];
minimizeCapacity -> deleteFirst [label=" size", dir=none];
minimizeCapacity -> isNotEmpty [label=" size", dir=none];
minimizeCapacity -> toString [label=" size, buffer", dir=none];
minimizeCapacity -> ensureCapacity [label=" size, buffer", dir=none];
minimizeCapacity -> appendPadding [label=" size, buffer", dir=none];
minimizeCapacity -> toStringBuffer [label=" size, buffer", dir=none];
minimizeCapacity -> charAt [label=" size, buffer", dir=none];
minimizeCapacity -> startsWith [label=" size, buffer", dir=none];
equalsIgnoreCase -> replaceFirst [label=" size", dir=none];
equalsIgnoreCase -> rightString [label=" size", dir=none];
equalsIgnoreCase -> replaceAll [label=" size", dir=none];
equalsIgnoreCase -> midString [label=" size", dir=none];
equalsIgnoreCase -> hashCode [label=" size", dir=none];
equalsIgnoreCase -> appendTo [label=" size", dir=none];
equalsIgnoreCase -> indexOf [label=" size", dir=none];
equalsIgnoreCase -> setNullText [label=" size", dir=none];
equalsIgnoreCase -> readFrom [label=" size", dir=none];
equalsIgnoreCase -> getChars [label=" size", dir=none];
equalsIgnoreCase -> length [label=" size", dir=none];
equalsIgnoreCase -> isEmpty [label=" size", dir=none];
equalsIgnoreCase -> clear [label=" size", dir=none];
equalsIgnoreCase -> deleteAll [label=" size", dir=none];
equalsIgnoreCase -> subSequence [label=" size", dir=none];
equalsIgnoreCase -> reverse [label=" size", dir=none];
equalsIgnoreCase -> lastIndexOf [label=" size", dir=none];
equalsIgnoreCase -> setLength [label=" size", dir=none];
equalsIgnoreCase -> contains [label=" size", dir=none];
equalsIgnoreCase -> size [label=" size", dir=none];
equalsIgnoreCase -> build [label=" size", dir=none];
equalsIgnoreCase -> endsWith [label=" size", dir=none];
equalsIgnoreCase -> leftString [label=" size", dir=none];
equalsIgnoreCase -> deleteFirst [label=" size", dir=none];
equalsIgnoreCase -> isNotEmpty [label=" size", dir=none];
equalsIgnoreCase -> toString [label=" size", dir=none];
equalsIgnoreCase -> ensureCapacity [label=" size", dir=none];
equalsIgnoreCase -> appendPadding [label=" size", dir=none];
equalsIgnoreCase -> toStringBuffer [label=" size", dir=none];
equalsIgnoreCase -> charAt [label=" size", dir=none];
equalsIgnoreCase -> startsWith [label=" size", dir=none];
indexOf -> replaceFirst [label=" size", dir=none];
indexOf -> rightString [label=" size, buffer", dir=none];
indexOf -> replaceAll [label=" size", dir=none];
indexOf -> substring [label=" buffer", dir=none];
indexOf -> capacity [label=" buffer", dir=none];
indexOf -> midString [label=" size, buffer", dir=none];
indexOf -> hashCode [label=" size, buffer", dir=none];
indexOf -> appendTo [label=" size, buffer", dir=none];
indexOf -> setNullText [label=" size", dir=none];
indexOf -> readFrom [label=" size, buffer", dir=none];
indexOf -> getChars [label=" size, buffer", dir=none];
indexOf -> length [label=" size", dir=none];
indexOf -> isEmpty [label=" size", dir=none];
indexOf -> clear [label=" size", dir=none];
indexOf -> deleteAll [label=" size", dir=none];
indexOf -> subSequence [label=" size, buffer", dir=none];
indexOf -> reverse [label=" size, buffer", dir=none];
indexOf -> lastIndexOf [label=" size, buffer", dir=none];
indexOf -> setLength [label=" size, buffer", dir=none];
indexOf -> contains [label=" size, buffer", dir=none];
indexOf -> size [label=" size", dir=none];
indexOf -> build [label=" size, buffer", dir=none];
indexOf -> endsWith [label=" size, buffer", dir=none];
indexOf -> leftString [label=" size, buffer", dir=none];
indexOf -> deleteFirst [label=" size", dir=none];
indexOf -> isNotEmpty [label=" size", dir=none];
indexOf -> toString [label=" size, buffer", dir=none];
indexOf -> ensureCapacity [label=" size, buffer", dir=none];
indexOf -> appendPadding [label=" size, buffer", dir=none];
indexOf -> toStringBuffer [label=" size, buffer", dir=none];
indexOf -> charAt [label=" size, buffer", dir=none];
indexOf -> startsWith [label=" size, buffer", dir=none];
setNullText -> replaceFirst [label=" size", dir=none];
setNullText -> rightString [label=" size", dir=none];
setNullText -> replaceAll [label=" size", dir=none];
setNullText -> midString [label=" size", dir=none];
setNullText -> hashCode [label=" size", dir=none];
setNullText -> appendTo [label=" size", dir=none];
setNullText -> readFrom [label=" size", dir=none];
setNullText -> getChars [label=" size", dir=none];
setNullText -> length [label=" size", dir=none];
setNullText -> isEmpty [label=" size", dir=none];
setNullText -> clear [label=" size", dir=none];
setNullText -> deleteAll [label=" size", dir=none];
setNullText -> subSequence [label=" size", dir=none];
setNullText -> reverse [label=" size", dir=none];
setNullText -> lastIndexOf [label=" size", dir=none];
setNullText -> setLength [label=" size", dir=none];
setNullText -> contains [label=" size", dir=none];
setNullText -> getNullText [label=" nullText", dir=none];
setNullText -> size [label=" size", dir=none];
setNullText -> build [label=" size", dir=none];
setNullText -> endsWith [label=" size", dir=none];
setNullText -> leftString [label=" size", dir=none];
setNullText -> deleteFirst [label=" size", dir=none];
setNullText -> appendNull [label=" nullText", dir=none];
setNullText -> isNotEmpty [label=" size", dir=none];
setNullText -> toString [label=" size", dir=none];
setNullText -> ensureCapacity [label=" size", dir=none];
setNullText -> appendPadding [label=" size", dir=none];
setNullText -> toStringBuffer [label=" size", dir=none];
setNullText -> charAt [label=" size", dir=none];
setNullText -> startsWith [label=" size", dir=none];
readFrom -> replaceFirst [label=" size", dir=none];
readFrom -> rightString [label=" size, buffer", dir=none];
readFrom -> replaceAll [label=" size", dir=none];
readFrom -> substring [label=" buffer", dir=none];
readFrom -> capacity [label=" buffer", dir=none];
readFrom -> midString [label=" size, buffer", dir=none];
readFrom -> hashCode [label=" size, buffer", dir=none];
readFrom -> appendTo [label=" size, buffer", dir=none];
readFrom -> getChars [label=" size, buffer", dir=none];
readFrom -> length [label=" size", dir=none];
readFrom -> isEmpty [label=" size", dir=none];
readFrom -> clear [label=" size", dir=none];
readFrom -> deleteAll [label=" size", dir=none];
readFrom -> subSequence [label=" size, buffer", dir=none];
readFrom -> reverse [label=" size, buffer", dir=none];
readFrom -> lastIndexOf [label=" size, buffer", dir=none];
readFrom -> setLength [label=" size, buffer", dir=none];
readFrom -> contains [label=" size, buffer", dir=none];
readFrom -> size [label=" size", dir=none];
readFrom -> build [label=" size, buffer", dir=none];
readFrom -> endsWith [label=" size, buffer", dir=none];
readFrom -> leftString [label=" size, buffer", dir=none];
readFrom -> deleteFirst [label=" size", dir=none];
readFrom -> isNotEmpty [label=" size", dir=none];
readFrom -> toString [label=" size, buffer", dir=none];
readFrom -> ensureCapacity [label=" size, buffer", dir=none];
readFrom -> appendPadding [label=" size, buffer", dir=none];
readFrom -> toStringBuffer [label=" size, buffer", dir=none];
readFrom -> charAt [label=" size, buffer", dir=none];
readFrom -> startsWith [label=" size, buffer", dir=none];
getChars -> length [label=" size", dir=none];
getChars -> isEmpty [label=" size", dir=none];
getChars -> clear [label=" size", dir=none];
getChars -> deleteAll [label=" size", dir=none];
getChars -> subSequence [label=" size, buffer", dir=none];
getChars -> reverse [label=" size, buffer", dir=none];
getChars -> lastIndexOf [label=" size, buffer", dir=none];
getChars -> build [label=" size, buffer", dir=none];
getChars -> deleteFirst [label=" size", dir=none];
getChars -> toString [label=" size, buffer", dir=none];
getChars -> appendPadding [label=" size, buffer", dir=none];
getChars -> charAt [label=" size, buffer", dir=none];
getChars -> startsWith [label=" size, buffer", dir=none];
length -> lastIndexOf [label=" size", dir=none];
length -> build [label=" size", dir=none];
length -> isEmpty [label=" size", dir=none];
length -> clear [label=" size", dir=none];
length -> deleteAll [label=" size", dir=none];
length -> deleteFirst [label=" size", dir=none];
length -> toString [label=" size", dir=none];
length -> subSequence [label=" size", dir=none];
length -> reverse [label=" size", dir=none];
length -> appendPadding [label=" size", dir=none];
length -> charAt [label=" size", dir=none];
length -> startsWith [label=" size", dir=none];
isEmpty -> lastIndexOf [label=" size", dir=none];
isEmpty -> build [label=" size", dir=none];
isEmpty -> clear [label=" size", dir=none];
isEmpty -> deleteAll [label=" size", dir=none];
isEmpty -> deleteFirst [label=" size", dir=none];
isEmpty -> toString [label=" size", dir=none];
isEmpty -> subSequence [label=" size", dir=none];
isEmpty -> reverse [label=" size", dir=none];
isEmpty -> appendPadding [label=" size", dir=none];
isEmpty -> charAt [label=" size", dir=none];
isEmpty -> startsWith [label=" size", dir=none];
clear -> lastIndexOf [label=" size", dir=none];
clear -> build [label=" size", dir=none];
clear -> deleteAll [label=" size", dir=none];
clear -> deleteFirst [label=" size", dir=none];
clear -> toString [label=" size", dir=none];
clear -> subSequence [label=" size", dir=none];
clear -> reverse [label=" size", dir=none];
clear -> appendPadding [label=" size", dir=none];
clear -> charAt [label=" size", dir=none];
clear -> startsWith [label=" size", dir=none];
deleteAll -> lastIndexOf [label=" size", dir=none];
deleteAll -> build [label=" size", dir=none];
deleteAll -> deleteFirst [label=" size", dir=none];
deleteAll -> toString [label=" size", dir=none];
deleteAll -> subSequence [label=" size", dir=none];
deleteAll -> reverse [label=" size", dir=none];
deleteAll -> appendPadding [label=" size", dir=none];
deleteAll -> charAt [label=" size", dir=none];
deleteAll -> startsWith [label=" size", dir=none];
subSequence -> lastIndexOf [label=" size, buffer", dir=none];
subSequence -> build [label=" size, buffer", dir=none];
subSequence -> deleteFirst [label=" size", dir=none];
subSequence -> toString [label=" size, buffer", dir=none];
subSequence -> reverse [label=" size, buffer", dir=none];
subSequence -> appendPadding [label=" size, buffer", dir=none];
subSequence -> charAt [label=" size, buffer", dir=none];
subSequence -> startsWith [label=" size, buffer", dir=none];
reverse -> lastIndexOf [label=" size, buffer", dir=none];
reverse -> build [label=" size, buffer", dir=none];
reverse -> deleteFirst [label=" size", dir=none];
reverse -> toString [label=" size, buffer", dir=none];
reverse -> appendPadding [label=" size, buffer", dir=none];
reverse -> charAt [label=" size, buffer", dir=none];
reverse -> startsWith [label=" size, buffer", dir=none];
lastIndexOf -> build [label=" size, buffer", dir=none];
lastIndexOf -> deleteFirst [label=" size", dir=none];
lastIndexOf -> toString [label=" size, buffer", dir=none];
lastIndexOf -> appendPadding [label=" size, buffer", dir=none];
lastIndexOf -> charAt [label=" size, buffer", dir=none];
lastIndexOf -> startsWith [label=" size, buffer", dir=none];
setLength -> replaceFirst [label=" size", dir=none];
setLength -> rightString [label=" size, buffer", dir=none];
setLength -> replaceAll [label=" size", dir=none];
setLength -> substring [label=" buffer", dir=none];
setLength -> capacity [label=" buffer", dir=none];
setLength -> midString [label=" size, buffer", dir=none];
setLength -> hashCode [label=" size, buffer", dir=none];
setLength -> appendTo [label=" size, buffer", dir=none];
setLength -> getChars [label=" size, buffer", dir=none];
setLength -> length [label=" size", dir=none];
setLength -> isEmpty [label=" size", dir=none];
setLength -> clear [label=" size", dir=none];
setLength -> deleteAll [label=" size", dir=none];
setLength -> subSequence [label=" size, buffer", dir=none];
setLength -> reverse [label=" size, buffer", dir=none];
setLength -> lastIndexOf [label=" size, buffer", dir=none];
setLength -> contains [label=" size, buffer", dir=none];
setLength -> size [label=" size", dir=none];
setLength -> build [label=" size, buffer", dir=none];
setLength -> endsWith [label=" size, buffer", dir=none];
setLength -> leftString [label=" size, buffer", dir=none];
setLength -> deleteFirst [label=" size", dir=none];
setLength -> isNotEmpty [label=" size", dir=none];
setLength -> toString [label=" size, buffer", dir=none];
setLength -> ensureCapacity [label=" size, buffer", dir=none];
setLength -> appendPadding [label=" size, buffer", dir=none];
setLength -> toStringBuffer [label=" size, buffer", dir=none];
setLength -> charAt [label=" size, buffer", dir=none];
setLength -> startsWith [label=" size, buffer", dir=none];
contains -> replaceFirst [label=" size", dir=none];
contains -> rightString [label=" size, buffer", dir=none];
contains -> replaceAll [label=" size", dir=none];
contains -> substring [label=" buffer", dir=none];
contains -> capacity [label=" buffer", dir=none];
contains -> midString [label=" size, buffer", dir=none];
contains -> hashCode [label=" size, buffer", dir=none];
contains -> appendTo [label=" size, buffer", dir=none];
contains -> getChars [label=" size, buffer", dir=none];
contains -> length [label=" size", dir=none];
contains -> isEmpty [label=" size", dir=none];
contains -> clear [label=" size", dir=none];
contains -> deleteAll [label=" size", dir=none];
contains -> subSequence [label=" size, buffer", dir=none];
contains -> reverse [label=" size, buffer", dir=none];
contains -> lastIndexOf [label=" size, buffer", dir=none];
contains -> size [label=" size", dir=none];
contains -> build [label=" size, buffer", dir=none];
contains -> endsWith [label=" size, buffer", dir=none];
contains -> leftString [label=" size, buffer", dir=none];
contains -> deleteFirst [label=" size", dir=none];
contains -> isNotEmpty [label=" size", dir=none];
contains -> toString [label=" size, buffer", dir=none];
contains -> ensureCapacity [label=" size, buffer", dir=none];
contains -> appendPadding [label=" size, buffer", dir=none];
contains -> toStringBuffer [label=" size, buffer", dir=none];
contains -> charAt [label=" size, buffer", dir=none];
contains -> startsWith [label=" size, buffer", dir=none];
size -> replaceFirst [label=" size", dir=none];
size -> rightString [label=" size", dir=none];
size -> replaceAll [label=" size", dir=none];
size -> midString [label=" size", dir=none];
size -> hashCode [label=" size", dir=none];
size -> appendTo [label=" size", dir=none];
size -> getChars [label=" size", dir=none];
size -> length [label=" size", dir=none];
size -> isEmpty [label=" size", dir=none];
size -> clear [label=" size", dir=none];
size -> deleteAll [label=" size", dir=none];
size -> subSequence [label=" size", dir=none];
size -> reverse [label=" size", dir=none];
size -> lastIndexOf [label=" size", dir=none];
size -> build [label=" size", dir=none];
size -> endsWith [label=" size", dir=none];
size -> leftString [label=" size", dir=none];
size -> deleteFirst [label=" size", dir=none];
size -> isNotEmpty [label=" size", dir=none];
size -> toString [label=" size", dir=none];
size -> ensureCapacity [label=" size", dir=none];
size -> appendPadding [label=" size", dir=none];
size -> toStringBuffer [label=" size", dir=none];
size -> charAt [label=" size", dir=none];
size -> startsWith [label=" size", dir=none];
build -> deleteFirst [label=" size", dir=none];
build -> toString [label=" size, buffer", dir=none];
build -> appendPadding [label=" size, buffer", dir=none];
build -> charAt [label=" size, buffer", dir=none];
build -> startsWith [label=" size, buffer", dir=none];
endsWith -> replaceFirst [label=" size", dir=none];
endsWith -> rightString [label=" size, buffer", dir=none];
endsWith -> replaceAll [label=" size", dir=none];
endsWith -> substring [label=" buffer", dir=none];
endsWith -> capacity [label=" buffer", dir=none];
endsWith -> midString [label=" size, buffer", dir=none];
endsWith -> hashCode [label=" size, buffer", dir=none];
endsWith -> appendTo [label=" size, buffer", dir=none];
endsWith -> getChars [label=" size, buffer", dir=none];
endsWith -> length [label=" size", dir=none];
endsWith -> isEmpty [label=" size", dir=none];
endsWith -> clear [label=" size", dir=none];
endsWith -> deleteAll [label=" size", dir=none];
endsWith -> subSequence [label=" size, buffer", dir=none];
endsWith -> reverse [label=" size, buffer", dir=none];
endsWith -> lastIndexOf [label=" size, buffer", dir=none];
endsWith -> build [label=" size, buffer", dir=none];
endsWith -> leftString [label=" size, buffer", dir=none];
endsWith -> deleteFirst [label=" size", dir=none];
endsWith -> isNotEmpty [label=" size", dir=none];
endsWith -> toString [label=" size, buffer", dir=none];
endsWith -> ensureCapacity [label=" size, buffer", dir=none];
endsWith -> appendPadding [label=" size, buffer", dir=none];
endsWith -> toStringBuffer [label=" size, buffer", dir=none];
endsWith -> charAt [label=" size, buffer", dir=none];
endsWith -> startsWith [label=" size, buffer", dir=none];
leftString -> replaceFirst [label=" size", dir=none];
leftString -> rightString [label=" size, buffer", dir=none];
leftString -> replaceAll [label=" size", dir=none];
leftString -> substring [label=" buffer", dir=none];
leftString -> capacity [label=" buffer", dir=none];
leftString -> midString [label=" size, buffer", dir=none];
leftString -> hashCode [label=" size, buffer", dir=none];
leftString -> appendTo [label=" size, buffer", dir=none];
leftString -> getChars [label=" size, buffer", dir=none];
leftString -> length [label=" size", dir=none];
leftString -> isEmpty [label=" size", dir=none];
leftString -> clear [label=" size", dir=none];
leftString -> deleteAll [label=" size", dir=none];
leftString -> subSequence [label=" size, buffer", dir=none];
leftString -> reverse [label=" size, buffer", dir=none];
leftString -> lastIndexOf [label=" size, buffer", dir=none];
leftString -> build [label=" size, buffer", dir=none];
leftString -> deleteFirst [label=" size", dir=none];
leftString -> isNotEmpty [label=" size", dir=none];
leftString -> toString [label=" size, buffer", dir=none];
leftString -> ensureCapacity [label=" size, buffer", dir=none];
leftString -> appendPadding [label=" size, buffer", dir=none];
leftString -> toStringBuffer [label=" size, buffer", dir=none];
leftString -> charAt [label=" size, buffer", dir=none];
leftString -> startsWith [label=" size, buffer", dir=none];
deleteFirst -> toString [label=" size", dir=none];
deleteFirst -> appendPadding [label=" size", dir=none];
deleteFirst -> charAt [label=" size", dir=none];
deleteFirst -> startsWith [label=" size", dir=none];
appendNull -> getNullText [label=" nullText", dir=none];
isNotEmpty -> getChars [label=" size", dir=none];
isNotEmpty -> length [label=" size", dir=none];
isNotEmpty -> isEmpty [label=" size", dir=none];
isNotEmpty -> clear [label=" size", dir=none];
isNotEmpty -> deleteAll [label=" size", dir=none];
isNotEmpty -> replaceFirst [label=" size", dir=none];
isNotEmpty -> rightString [label=" size", dir=none];
isNotEmpty -> subSequence [label=" size", dir=none];
isNotEmpty -> reverse [label=" size", dir=none];
isNotEmpty -> replaceAll [label=" size", dir=none];
isNotEmpty -> midString [label=" size", dir=none];
isNotEmpty -> lastIndexOf [label=" size", dir=none];
isNotEmpty -> build [label=" size", dir=none];
isNotEmpty -> hashCode [label=" size", dir=none];
isNotEmpty -> appendTo [label=" size", dir=none];
isNotEmpty -> deleteFirst [label=" size", dir=none];
isNotEmpty -> toString [label=" size", dir=none];
isNotEmpty -> ensureCapacity [label=" size", dir=none];
isNotEmpty -> appendPadding [label=" size", dir=none];
isNotEmpty -> toStringBuffer [label=" size", dir=none];
isNotEmpty -> charAt [label=" size", dir=none];
isNotEmpty -> startsWith [label=" size", dir=none];
toString -> appendPadding [label=" size, buffer", dir=none];
toString -> charAt [label=" size, buffer", dir=none];
toString -> startsWith [label=" size, buffer", dir=none];
ensureCapacity -> getChars [label=" size, buffer", dir=none];
ensureCapacity -> length [label=" size", dir=none];
ensureCapacity -> isEmpty [label=" size", dir=none];
ensureCapacity -> clear [label=" size", dir=none];
ensureCapacity -> deleteAll [label=" size", dir=none];
ensureCapacity -> replaceFirst [label=" size", dir=none];
ensureCapacity -> rightString [label=" size, buffer", dir=none];
ensureCapacity -> subSequence [label=" size, buffer", dir=none];
ensureCapacity -> reverse [label=" size, buffer", dir=none];
ensureCapacity -> replaceAll [label=" size", dir=none];
ensureCapacity -> substring [label=" buffer", dir=none];
ensureCapacity -> capacity [label=" buffer", dir=none];
ensureCapacity -> midString [label=" size, buffer", dir=none];
ensureCapacity -> lastIndexOf [label=" size, buffer", dir=none];
ensureCapacity -> build [label=" size, buffer", dir=none];
ensureCapacity -> hashCode [label=" size, buffer", dir=none];
ensureCapacity -> appendTo [label=" size, buffer", dir=none];
ensureCapacity -> deleteFirst [label=" size", dir=none];
ensureCapacity -> toString [label=" size, buffer", dir=none];
ensureCapacity -> appendPadding [label=" size, buffer", dir=none];
ensureCapacity -> toStringBuffer [label=" size, buffer", dir=none];
ensureCapacity -> charAt [label=" size, buffer", dir=none];
ensureCapacity -> startsWith [label=" size, buffer", dir=none];
appendPadding -> charAt [label=" size, buffer", dir=none];
appendPadding -> startsWith [label=" size, buffer", dir=none];
toStringBuffer -> getChars [label=" size, buffer", dir=none];
toStringBuffer -> length [label=" size", dir=none];
toStringBuffer -> isEmpty [label=" size", dir=none];
toStringBuffer -> clear [label=" size", dir=none];
toStringBuffer -> deleteAll [label=" size", dir=none];
toStringBuffer -> replaceFirst [label=" size", dir=none];
toStringBuffer -> rightString [label=" size, buffer", dir=none];
toStringBuffer -> subSequence [label=" size, buffer", dir=none];
toStringBuffer -> reverse [label=" size, buffer", dir=none];
toStringBuffer -> replaceAll [label=" size", dir=none];
toStringBuffer -> substring [label=" buffer", dir=none];
toStringBuffer -> capacity [label=" buffer", dir=none];
toStringBuffer -> midString [label=" size, buffer", dir=none];
toStringBuffer -> lastIndexOf [label=" size, buffer", dir=none];
toStringBuffer -> build [label=" size, buffer", dir=none];
toStringBuffer -> hashCode [label=" size, buffer", dir=none];
toStringBuffer -> appendTo [label=" size, buffer", dir=none];
toStringBuffer -> deleteFirst [label=" size", dir=none];
toStringBuffer -> toString [label=" size, buffer", dir=none];
toStringBuffer -> appendPadding [label=" size, buffer", dir=none];
toStringBuffer -> charAt [label=" size, buffer", dir=none];
toStringBuffer -> startsWith [label=" size, buffer", dir=none];
charAt -> startsWith [label=" size, buffer", dir=none];
}