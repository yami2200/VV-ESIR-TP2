digraph G {
testIsBefore;
testGetMaximum;
testBetweenWithCompare;
testElementCompareTo;
testFitNull;
testConstructorSignatureWithAbstractComparableClasses;
testContains;
testIsOverlappedBy;
setUp;
testRangeOfChars;
testComparableConstructors;
testEqualsObject;
testIntersectionWith;
testIsEndedBy;
testIsBeforeRange;
testFit;
testIsAfter;
testHashCode;
testIntersectionWithNull;
testSerializing;
testIsWithCompare;
testIsAfterRange;
testContainsRange;
testToString;
testOfWithCompare;
testIsStartedBy;
testToStringFormat;
testGetMinimum;
testIntersectionWithNonOverlapping;
testIsBefore -> testIntersectionWith [label=" intRange", dir=none];
testIsBefore -> testIsEndedBy [label=" intRange", dir=none];
testIsBefore -> testGetMaximum [label=" intRange", dir=none];
testIsBefore -> testIsBeforeRange [label=" intRange", dir=none];
testIsBefore -> testFit [label=" intRange", dir=none];
testIsBefore -> testIsAfter [label=" intRange", dir=none];
testIsBefore -> testElementCompareTo [label=" intRange", dir=none];
testIsBefore -> testHashCode [label=" intRange", dir=none];
testIsBefore -> testIntersectionWithNull [label=" intRange", dir=none];
testIsBefore -> testFitNull [label=" intRange", dir=none];
testIsBefore -> testSerializing [label=" intRange", dir=none];
testIsBefore -> testContains [label=" intRange", dir=none];
testIsBefore -> testIsAfterRange [label=" intRange", dir=none];
testIsBefore -> testIsOverlappedBy [label=" intRange", dir=none];
testIsBefore -> testContainsRange [label=" intRange", dir=none];
testIsBefore -> testToString [label=" intRange", dir=none];
testIsBefore -> testIsStartedBy [label=" intRange", dir=none];
testIsBefore -> setUp [label=" intRange", dir=none];
testIsBefore -> testToStringFormat [label=" intRange", dir=none];
testIsBefore -> testGetMinimum [label=" intRange", dir=none];
testIsBefore -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIntersectionWith -> testIsEndedBy [label=" intRange", dir=none];
testIntersectionWith -> testIsBeforeRange [label=" intRange", dir=none];
testIntersectionWith -> testFit [label=" intRange", dir=none];
testIntersectionWith -> testIsAfter [label=" intRange", dir=none];
testIntersectionWith -> testHashCode [label=" intRange, byteRange", dir=none];
testIntersectionWith -> testIntersectionWithNull [label=" intRange", dir=none];
testIntersectionWith -> testSerializing [label=" intRange", dir=none];
testIntersectionWith -> testIsAfterRange [label=" intRange", dir=none];
testIntersectionWith -> testContainsRange [label=" intRange", dir=none];
testIntersectionWith -> testToString [label=" intRange, byteRange", dir=none];
testIntersectionWith -> testIsStartedBy [label=" intRange", dir=none];
testIntersectionWith -> testToStringFormat [label=" intRange", dir=none];
testIntersectionWith -> testGetMinimum [label=" intRange, longRange, floatRange, doubleRange", dir=none];
testIntersectionWith -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsEndedBy -> testIsBeforeRange [label=" intRange", dir=none];
testIsEndedBy -> testFit [label=" intRange", dir=none];
testIsEndedBy -> testIsAfter [label=" intRange", dir=none];
testIsEndedBy -> testHashCode [label=" intRange", dir=none];
testIsEndedBy -> testIntersectionWithNull [label=" intRange", dir=none];
testIsEndedBy -> testSerializing [label=" intRange", dir=none];
testIsEndedBy -> testIsAfterRange [label=" intRange", dir=none];
testIsEndedBy -> testContainsRange [label=" intRange", dir=none];
testIsEndedBy -> testToString [label=" intRange", dir=none];
testIsEndedBy -> testIsStartedBy [label=" intRange", dir=none];
testIsEndedBy -> testToStringFormat [label=" intRange", dir=none];
testIsEndedBy -> testGetMinimum [label=" intRange", dir=none];
testIsEndedBy -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testGetMaximum -> testIntersectionWith [label=" intRange, longRange, floatRange, doubleRange", dir=none];
testGetMaximum -> testIsEndedBy [label=" intRange", dir=none];
testGetMaximum -> testIsBeforeRange [label=" intRange", dir=none];
testGetMaximum -> testFit [label=" intRange", dir=none];
testGetMaximum -> testIsAfter [label=" intRange", dir=none];
testGetMaximum -> testElementCompareTo [label=" intRange", dir=none];
testGetMaximum -> testHashCode [label=" intRange", dir=none];
testGetMaximum -> testIntersectionWithNull [label=" intRange", dir=none];
testGetMaximum -> testFitNull [label=" intRange", dir=none];
testGetMaximum -> testSerializing [label=" intRange", dir=none];
testGetMaximum -> testContains [label=" intRange", dir=none];
testGetMaximum -> testIsAfterRange [label=" intRange", dir=none];
testGetMaximum -> testIsOverlappedBy [label=" intRange", dir=none];
testGetMaximum -> testContainsRange [label=" intRange", dir=none];
testGetMaximum -> testToString [label=" intRange", dir=none];
testGetMaximum -> testIsStartedBy [label=" intRange", dir=none];
testGetMaximum -> setUp [label=" intRange, longRange, floatRange, doubleRange", dir=none];
testGetMaximum -> testToStringFormat [label=" intRange", dir=none];
testGetMaximum -> testGetMinimum [label=" intRange, longRange, floatRange, doubleRange", dir=none];
testGetMaximum -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsBeforeRange -> testIsAfterRange [label=" intRange", dir=none];
testIsBeforeRange -> testContainsRange [label=" intRange", dir=none];
testIsBeforeRange -> testToString [label=" intRange", dir=none];
testIsBeforeRange -> testIsStartedBy [label=" intRange", dir=none];
testIsBeforeRange -> testFit [label=" intRange", dir=none];
testIsBeforeRange -> testIsAfter [label=" intRange", dir=none];
testIsBeforeRange -> testToStringFormat [label=" intRange", dir=none];
testIsBeforeRange -> testGetMinimum [label=" intRange", dir=none];
testIsBeforeRange -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsBeforeRange -> testHashCode [label=" intRange", dir=none];
testIsBeforeRange -> testIntersectionWithNull [label=" intRange", dir=none];
testIsBeforeRange -> testSerializing [label=" intRange", dir=none];
testFit -> testIsAfterRange [label=" intRange", dir=none];
testFit -> testContainsRange [label=" intRange", dir=none];
testFit -> testToString [label=" intRange", dir=none];
testFit -> testIsStartedBy [label=" intRange", dir=none];
testFit -> testIsAfter [label=" intRange", dir=none];
testFit -> testToStringFormat [label=" intRange", dir=none];
testFit -> testGetMinimum [label=" intRange", dir=none];
testFit -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testFit -> testHashCode [label=" intRange", dir=none];
testFit -> testIntersectionWithNull [label=" intRange", dir=none];
testFit -> testSerializing [label=" intRange", dir=none];
testIsAfter -> testIsAfterRange [label=" intRange", dir=none];
testIsAfter -> testContainsRange [label=" intRange", dir=none];
testIsAfter -> testToString [label=" intRange", dir=none];
testIsAfter -> testIsStartedBy [label=" intRange", dir=none];
testIsAfter -> testToStringFormat [label=" intRange", dir=none];
testIsAfter -> testGetMinimum [label=" intRange", dir=none];
testIsAfter -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsAfter -> testHashCode [label=" intRange", dir=none];
testIsAfter -> testIntersectionWithNull [label=" intRange", dir=none];
testIsAfter -> testSerializing [label=" intRange", dir=none];
testElementCompareTo -> testIntersectionWith [label=" intRange", dir=none];
testElementCompareTo -> testIsEndedBy [label=" intRange", dir=none];
testElementCompareTo -> testIsBeforeRange [label=" intRange", dir=none];
testElementCompareTo -> testFit [label=" intRange", dir=none];
testElementCompareTo -> testIsAfter [label=" intRange", dir=none];
testElementCompareTo -> testHashCode [label=" intRange", dir=none];
testElementCompareTo -> testIntersectionWithNull [label=" intRange", dir=none];
testElementCompareTo -> testFitNull [label=" intRange", dir=none];
testElementCompareTo -> testSerializing [label=" intRange", dir=none];
testElementCompareTo -> testContains [label=" intRange", dir=none];
testElementCompareTo -> testIsAfterRange [label=" intRange", dir=none];
testElementCompareTo -> testIsOverlappedBy [label=" intRange", dir=none];
testElementCompareTo -> testContainsRange [label=" intRange", dir=none];
testElementCompareTo -> testToString [label=" intRange", dir=none];
testElementCompareTo -> testIsStartedBy [label=" intRange", dir=none];
testElementCompareTo -> setUp [label=" intRange", dir=none];
testElementCompareTo -> testToStringFormat [label=" intRange", dir=none];
testElementCompareTo -> testGetMinimum [label=" intRange", dir=none];
testElementCompareTo -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testHashCode -> testIsAfterRange [label=" intRange", dir=none];
testHashCode -> testContainsRange [label=" intRange", dir=none];
testHashCode -> testToString [label=" intRange, byteRange", dir=none];
testHashCode -> testIsStartedBy [label=" intRange", dir=none];
testHashCode -> testToStringFormat [label=" intRange", dir=none];
testHashCode -> testGetMinimum [label=" intRange", dir=none];
testHashCode -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testHashCode -> testIntersectionWithNull [label=" intRange", dir=none];
testHashCode -> testSerializing [label=" intRange", dir=none];
testIntersectionWithNull -> testIsAfterRange [label=" intRange", dir=none];
testIntersectionWithNull -> testContainsRange [label=" intRange", dir=none];
testIntersectionWithNull -> testToString [label=" intRange", dir=none];
testIntersectionWithNull -> testIsStartedBy [label=" intRange", dir=none];
testIntersectionWithNull -> testToStringFormat [label=" intRange", dir=none];
testIntersectionWithNull -> testGetMinimum [label=" intRange", dir=none];
testIntersectionWithNull -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIntersectionWithNull -> testSerializing [label=" intRange", dir=none];
testFitNull -> testIntersectionWith [label=" intRange", dir=none];
testFitNull -> testIsEndedBy [label=" intRange", dir=none];
testFitNull -> testIsBeforeRange [label=" intRange", dir=none];
testFitNull -> testFit [label=" intRange", dir=none];
testFitNull -> testIsAfter [label=" intRange", dir=none];
testFitNull -> testHashCode [label=" intRange", dir=none];
testFitNull -> testIntersectionWithNull [label=" intRange", dir=none];
testFitNull -> testSerializing [label=" intRange", dir=none];
testFitNull -> testContains [label=" intRange", dir=none];
testFitNull -> testIsAfterRange [label=" intRange", dir=none];
testFitNull -> testIsOverlappedBy [label=" intRange", dir=none];
testFitNull -> testContainsRange [label=" intRange", dir=none];
testFitNull -> testToString [label=" intRange", dir=none];
testFitNull -> testIsStartedBy [label=" intRange", dir=none];
testFitNull -> setUp [label=" intRange", dir=none];
testFitNull -> testToStringFormat [label=" intRange", dir=none];
testFitNull -> testGetMinimum [label=" intRange", dir=none];
testFitNull -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testSerializing -> testIsAfterRange [label=" intRange", dir=none];
testSerializing -> testContainsRange [label=" intRange", dir=none];
testSerializing -> testToString [label=" intRange", dir=none];
testSerializing -> testIsStartedBy [label=" intRange", dir=none];
testSerializing -> testToStringFormat [label=" intRange", dir=none];
testSerializing -> testGetMinimum [label=" intRange", dir=none];
testSerializing -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testContains -> testIntersectionWith [label=" intRange", dir=none];
testContains -> testIsEndedBy [label=" intRange", dir=none];
testContains -> testIsBeforeRange [label=" intRange", dir=none];
testContains -> testFit [label=" intRange", dir=none];
testContains -> testIsAfter [label=" intRange", dir=none];
testContains -> testHashCode [label=" intRange", dir=none];
testContains -> testIntersectionWithNull [label=" intRange", dir=none];
testContains -> testSerializing [label=" intRange", dir=none];
testContains -> testIsAfterRange [label=" intRange", dir=none];
testContains -> testIsOverlappedBy [label=" intRange", dir=none];
testContains -> testContainsRange [label=" intRange", dir=none];
testContains -> testToString [label=" intRange", dir=none];
testContains -> testIsStartedBy [label=" intRange", dir=none];
testContains -> setUp [label=" intRange", dir=none];
testContains -> testToStringFormat [label=" intRange", dir=none];
testContains -> testGetMinimum [label=" intRange", dir=none];
testContains -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsAfterRange -> testContainsRange [label=" intRange", dir=none];
testIsAfterRange -> testToString [label=" intRange", dir=none];
testIsAfterRange -> testIsStartedBy [label=" intRange", dir=none];
testIsAfterRange -> testToStringFormat [label=" intRange", dir=none];
testIsAfterRange -> testGetMinimum [label=" intRange", dir=none];
testIsAfterRange -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsOverlappedBy -> testIntersectionWith [label=" intRange", dir=none];
testIsOverlappedBy -> testIsEndedBy [label=" intRange", dir=none];
testIsOverlappedBy -> testIsBeforeRange [label=" intRange", dir=none];
testIsOverlappedBy -> testFit [label=" intRange", dir=none];
testIsOverlappedBy -> testIsAfter [label=" intRange", dir=none];
testIsOverlappedBy -> testHashCode [label=" intRange", dir=none];
testIsOverlappedBy -> testIntersectionWithNull [label=" intRange", dir=none];
testIsOverlappedBy -> testSerializing [label=" intRange", dir=none];
testIsOverlappedBy -> testIsAfterRange [label=" intRange", dir=none];
testIsOverlappedBy -> testContainsRange [label=" intRange", dir=none];
testIsOverlappedBy -> testToString [label=" intRange", dir=none];
testIsOverlappedBy -> testIsStartedBy [label=" intRange", dir=none];
testIsOverlappedBy -> setUp [label=" intRange", dir=none];
testIsOverlappedBy -> testToStringFormat [label=" intRange", dir=none];
testIsOverlappedBy -> testGetMinimum [label=" intRange", dir=none];
testIsOverlappedBy -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testContainsRange -> testToString [label=" intRange", dir=none];
testContainsRange -> testIsStartedBy [label=" intRange", dir=none];
testContainsRange -> testToStringFormat [label=" intRange", dir=none];
testContainsRange -> testGetMinimum [label=" intRange", dir=none];
testContainsRange -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testToString -> testIsStartedBy [label=" intRange", dir=none];
testToString -> testToStringFormat [label=" intRange", dir=none];
testToString -> testGetMinimum [label=" intRange", dir=none];
testToString -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testIsStartedBy -> testToStringFormat [label=" intRange", dir=none];
testIsStartedBy -> testGetMinimum [label=" intRange", dir=none];
testIsStartedBy -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
setUp -> testIntersectionWith [label=" intRange, longRange, floatRange, byteRange, doubleRange", dir=none];
setUp -> testIsEndedBy [label=" intRange", dir=none];
setUp -> testIsBeforeRange [label=" intRange", dir=none];
setUp -> testFit [label=" intRange", dir=none];
setUp -> testIsAfter [label=" intRange", dir=none];
setUp -> testHashCode [label=" intRange, byteRange3, byteRange2, byteRange", dir=none];
setUp -> testIntersectionWithNull [label=" intRange", dir=none];
setUp -> testSerializing [label=" intRange", dir=none];
setUp -> testIsAfterRange [label=" intRange", dir=none];
setUp -> testContainsRange [label=" intRange", dir=none];
setUp -> testToString [label=" intRange, byteRange", dir=none];
setUp -> testIsStartedBy [label=" intRange", dir=none];
setUp -> testToStringFormat [label=" intRange", dir=none];
setUp -> testGetMinimum [label=" intRange, longRange, floatRange, doubleRange", dir=none];
setUp -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
setUp -> testEqualsObject [label=" byteRange3, byteRange2, byteRange", dir=none];
testToStringFormat -> testGetMinimum [label=" intRange", dir=none];
testToStringFormat -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testGetMinimum -> testIntersectionWithNonOverlapping [label=" intRange", dir=none];
testEqualsObject -> testIntersectionWith [label=" byteRange", dir=none];
testEqualsObject -> testToString [label=" byteRange", dir=none];
testEqualsObject -> testHashCode [label=" byteRange3, byteRange2, byteRange", dir=none];
}