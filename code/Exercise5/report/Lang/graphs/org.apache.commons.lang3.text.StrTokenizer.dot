digraph G {
getCSVInstance;
next;
previousToken;
getContent;
isEmptyTokenAsNull;
nextIndex;
isIgnoreEmptyTokens;
remove;
getTokenList;
hasPrevious;
setTrimmerMatcher;
setDelimiterChar;
setDelimiterString;
getTrimmerMatcher;
add;
getTSVInstance;
set;
previous;
setQuoteChar;
getDelimiterMatcher;
getQuoteMatcher;
setIgnoredChar;
setDelimiterMatcher;
hasNext;
setQuoteMatcher;
getIgnoredMatcher;
setIgnoreEmptyTokens;
getTokenArray;
size;
setEmptyTokenAsNull;
nextToken;
clone;
reset;
toString;
previousIndex;
setIgnoredMatcher;
next -> previousToken [label=" tokens, tokenPos", dir=none];
next -> getTokenArray [label=" tokens", dir=none];
next -> previous [label=" tokens, tokenPos", dir=none];
next -> size [label=" tokens", dir=none];
next -> nextToken [label=" tokens, tokenPos", dir=none];
next -> getTokenList [label=" tokens", dir=none];
next -> hasPrevious [label=" tokenPos", dir=none];
next -> hasNext [label=" tokens, tokenPos", dir=none];
next -> toString [label=" tokens", dir=none];
next -> nextIndex [label=" tokenPos", dir=none];
next -> previousIndex [label=" tokenPos", dir=none];
previousToken -> getTokenArray [label=" tokens", dir=none];
previousToken -> previous [label=" tokens, tokenPos", dir=none];
previousToken -> size [label=" tokens", dir=none];
previousToken -> nextToken [label=" tokens, tokenPos", dir=none];
previousToken -> getTokenList [label=" tokens", dir=none];
previousToken -> hasPrevious [label=" tokenPos", dir=none];
previousToken -> hasNext [label=" tokens, tokenPos", dir=none];
previousToken -> toString [label=" tokens", dir=none];
previousToken -> nextIndex [label=" tokenPos", dir=none];
previousToken -> previousIndex [label=" tokenPos", dir=none];
getTokenArray -> size [label=" tokens", dir=none];
getTokenArray -> nextToken [label=" tokens", dir=none];
getTokenArray -> toString [label=" tokens", dir=none];
previous -> getTokenArray [label=" tokens", dir=none];
previous -> size [label=" tokens", dir=none];
previous -> nextToken [label=" tokens, tokenPos", dir=none];
previous -> hasNext [label=" tokens, tokenPos", dir=none];
previous -> toString [label=" tokens", dir=none];
previous -> previousIndex [label=" tokenPos", dir=none];
size -> nextToken [label=" tokens", dir=none];
size -> toString [label=" tokens", dir=none];
nextToken -> toString [label=" tokens", dir=none];
nextToken -> previousIndex [label=" tokenPos", dir=none];
getTokenList -> getTokenArray [label=" tokens", dir=none];
getTokenList -> previous [label=" tokens", dir=none];
getTokenList -> size [label=" tokens", dir=none];
getTokenList -> nextToken [label=" tokens", dir=none];
getTokenList -> hasNext [label=" tokens", dir=none];
getTokenList -> toString [label=" tokens", dir=none];
hasPrevious -> previous [label=" tokenPos", dir=none];
hasPrevious -> nextToken [label=" tokenPos", dir=none];
hasPrevious -> hasNext [label=" tokenPos", dir=none];
hasPrevious -> previousIndex [label=" tokenPos", dir=none];
hasNext -> getTokenArray [label=" tokens", dir=none];
hasNext -> size [label=" tokens", dir=none];
hasNext -> nextToken [label=" tokens, tokenPos", dir=none];
hasNext -> toString [label=" tokens", dir=none];
hasNext -> previousIndex [label=" tokenPos", dir=none];
nextIndex -> previous [label=" tokenPos", dir=none];
nextIndex -> nextToken [label=" tokenPos", dir=none];
nextIndex -> hasPrevious [label=" tokenPos", dir=none];
nextIndex -> hasNext [label=" tokenPos", dir=none];
nextIndex -> previousIndex [label=" tokenPos", dir=none];
isIgnoreEmptyTokens -> setIgnoreEmptyTokens [label=" ignoreEmptyTokens", dir=none];
}