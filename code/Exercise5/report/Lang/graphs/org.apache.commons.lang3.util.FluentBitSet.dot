digraph G {
intersects;
previousSetBit;
nextSetBit;
stream;
and;
hashCode;
get;
xor;
flip;
nextClearBit;
previousClearBit;
or;
set;
setInclusive;
toLongArray;
clear;
isEmpty;
length;
bitSet;
cardinality;
size;
equals;
toByteArray;
clone;
toString;
andNot;
nextClearBit -> previousClearBit [label=" bitSet", dir=none];
nextClearBit -> set [label=" bitSet", dir=none];
nextClearBit -> setInclusive [label=" bitSet", dir=none];
nextClearBit -> toLongArray [label=" bitSet", dir=none];
nextClearBit -> clear [label=" bitSet", dir=none];
nextClearBit -> isEmpty [label=" bitSet", dir=none];
nextClearBit -> length [label=" bitSet", dir=none];
nextClearBit -> bitSet [label=" bitSet", dir=none];
nextClearBit -> cardinality [label=" bitSet", dir=none];
nextClearBit -> size [label=" bitSet", dir=none];
nextClearBit -> equals [label=" bitSet", dir=none];
nextClearBit -> toByteArray [label=" bitSet", dir=none];
nextClearBit -> clone [label=" bitSet", dir=none];
nextClearBit -> toString [label=" bitSet", dir=none];
previousClearBit -> set [label=" bitSet", dir=none];
previousClearBit -> setInclusive [label=" bitSet", dir=none];
previousClearBit -> toLongArray [label=" bitSet", dir=none];
previousClearBit -> clear [label=" bitSet", dir=none];
previousClearBit -> isEmpty [label=" bitSet", dir=none];
previousClearBit -> length [label=" bitSet", dir=none];
previousClearBit -> bitSet [label=" bitSet", dir=none];
previousClearBit -> cardinality [label=" bitSet", dir=none];
previousClearBit -> size [label=" bitSet", dir=none];
previousClearBit -> equals [label=" bitSet", dir=none];
previousClearBit -> toByteArray [label=" bitSet", dir=none];
previousClearBit -> clone [label=" bitSet", dir=none];
previousClearBit -> toString [label=" bitSet", dir=none];
set -> setInclusive [label=" bitSet", dir=none];
set -> toLongArray [label=" bitSet", dir=none];
set -> size [label=" bitSet", dir=none];
set -> equals [label=" bitSet", dir=none];
set -> toByteArray [label=" bitSet", dir=none];
set -> clear [label=" bitSet", dir=none];
set -> isEmpty [label=" bitSet", dir=none];
set -> length [label=" bitSet", dir=none];
set -> clone [label=" bitSet", dir=none];
set -> toString [label=" bitSet", dir=none];
set -> bitSet [label=" bitSet", dir=none];
set -> cardinality [label=" bitSet", dir=none];
setInclusive -> toLongArray [label=" bitSet", dir=none];
setInclusive -> size [label=" bitSet", dir=none];
setInclusive -> equals [label=" bitSet", dir=none];
setInclusive -> toByteArray [label=" bitSet", dir=none];
setInclusive -> clear [label=" bitSet", dir=none];
setInclusive -> isEmpty [label=" bitSet", dir=none];
setInclusive -> length [label=" bitSet", dir=none];
setInclusive -> clone [label=" bitSet", dir=none];
setInclusive -> toString [label=" bitSet", dir=none];
setInclusive -> bitSet [label=" bitSet", dir=none];
setInclusive -> cardinality [label=" bitSet", dir=none];
toLongArray -> size [label=" bitSet", dir=none];
toLongArray -> equals [label=" bitSet", dir=none];
toLongArray -> toByteArray [label=" bitSet", dir=none];
toLongArray -> clear [label=" bitSet", dir=none];
toLongArray -> isEmpty [label=" bitSet", dir=none];
toLongArray -> length [label=" bitSet", dir=none];
toLongArray -> clone [label=" bitSet", dir=none];
toLongArray -> toString [label=" bitSet", dir=none];
toLongArray -> bitSet [label=" bitSet", dir=none];
toLongArray -> cardinality [label=" bitSet", dir=none];
intersects -> nextClearBit [label=" bitSet", dir=none];
intersects -> previousClearBit [label=" bitSet", dir=none];
intersects -> set [label=" bitSet", dir=none];
intersects -> setInclusive [label=" bitSet", dir=none];
intersects -> toLongArray [label=" bitSet", dir=none];
intersects -> previousSetBit [label=" bitSet", dir=none];
intersects -> clear [label=" bitSet", dir=none];
intersects -> isEmpty [label=" bitSet", dir=none];
intersects -> length [label=" bitSet", dir=none];
intersects -> nextSetBit [label=" bitSet", dir=none];
intersects -> bitSet [label=" bitSet", dir=none];
intersects -> cardinality [label=" bitSet", dir=none];
intersects -> size [label=" bitSet", dir=none];
intersects -> stream [label=" bitSet", dir=none];
intersects -> and [label=" bitSet", dir=none];
intersects -> hashCode [label=" bitSet", dir=none];
intersects -> get [label=" bitSet", dir=none];
intersects -> equals [label=" bitSet", dir=none];
intersects -> toByteArray [label=" bitSet", dir=none];
intersects -> clone [label=" bitSet", dir=none];
intersects -> xor [label=" bitSet", dir=none];
intersects -> toString [label=" bitSet", dir=none];
intersects -> flip [label=" bitSet", dir=none];
previousSetBit -> nextClearBit [label=" bitSet", dir=none];
previousSetBit -> previousClearBit [label=" bitSet", dir=none];
previousSetBit -> set [label=" bitSet", dir=none];
previousSetBit -> setInclusive [label=" bitSet", dir=none];
previousSetBit -> toLongArray [label=" bitSet", dir=none];
previousSetBit -> clear [label=" bitSet", dir=none];
previousSetBit -> isEmpty [label=" bitSet", dir=none];
previousSetBit -> length [label=" bitSet", dir=none];
previousSetBit -> nextSetBit [label=" bitSet", dir=none];
previousSetBit -> bitSet [label=" bitSet", dir=none];
previousSetBit -> cardinality [label=" bitSet", dir=none];
previousSetBit -> size [label=" bitSet", dir=none];
previousSetBit -> stream [label=" bitSet", dir=none];
previousSetBit -> and [label=" bitSet", dir=none];
previousSetBit -> hashCode [label=" bitSet", dir=none];
previousSetBit -> get [label=" bitSet", dir=none];
previousSetBit -> equals [label=" bitSet", dir=none];
previousSetBit -> toByteArray [label=" bitSet", dir=none];
previousSetBit -> clone [label=" bitSet", dir=none];
previousSetBit -> xor [label=" bitSet", dir=none];
previousSetBit -> toString [label=" bitSet", dir=none];
previousSetBit -> flip [label=" bitSet", dir=none];
clear -> size [label=" bitSet", dir=none];
clear -> equals [label=" bitSet", dir=none];
clear -> toByteArray [label=" bitSet", dir=none];
clear -> isEmpty [label=" bitSet", dir=none];
clear -> length [label=" bitSet", dir=none];
clear -> clone [label=" bitSet", dir=none];
clear -> toString [label=" bitSet", dir=none];
clear -> bitSet [label=" bitSet", dir=none];
clear -> cardinality [label=" bitSet", dir=none];
isEmpty -> size [label=" bitSet", dir=none];
isEmpty -> equals [label=" bitSet", dir=none];
isEmpty -> toByteArray [label=" bitSet", dir=none];
isEmpty -> length [label=" bitSet", dir=none];
isEmpty -> clone [label=" bitSet", dir=none];
isEmpty -> toString [label=" bitSet", dir=none];
isEmpty -> bitSet [label=" bitSet", dir=none];
isEmpty -> cardinality [label=" bitSet", dir=none];
length -> size [label=" bitSet", dir=none];
length -> equals [label=" bitSet", dir=none];
length -> toByteArray [label=" bitSet", dir=none];
length -> clone [label=" bitSet", dir=none];
length -> toString [label=" bitSet", dir=none];
length -> bitSet [label=" bitSet", dir=none];
length -> cardinality [label=" bitSet", dir=none];
nextSetBit -> nextClearBit [label=" bitSet", dir=none];
nextSetBit -> previousClearBit [label=" bitSet", dir=none];
nextSetBit -> set [label=" bitSet", dir=none];
nextSetBit -> setInclusive [label=" bitSet", dir=none];
nextSetBit -> toLongArray [label=" bitSet", dir=none];
nextSetBit -> clear [label=" bitSet", dir=none];
nextSetBit -> isEmpty [label=" bitSet", dir=none];
nextSetBit -> length [label=" bitSet", dir=none];
nextSetBit -> bitSet [label=" bitSet", dir=none];
nextSetBit -> cardinality [label=" bitSet", dir=none];
nextSetBit -> size [label=" bitSet", dir=none];
nextSetBit -> stream [label=" bitSet", dir=none];
nextSetBit -> and [label=" bitSet", dir=none];
nextSetBit -> hashCode [label=" bitSet", dir=none];
nextSetBit -> get [label=" bitSet", dir=none];
nextSetBit -> equals [label=" bitSet", dir=none];
nextSetBit -> toByteArray [label=" bitSet", dir=none];
nextSetBit -> clone [label=" bitSet", dir=none];
nextSetBit -> xor [label=" bitSet", dir=none];
nextSetBit -> toString [label=" bitSet", dir=none];
nextSetBit -> flip [label=" bitSet", dir=none];
bitSet -> size [label=" bitSet", dir=none];
bitSet -> equals [label=" bitSet", dir=none];
bitSet -> toByteArray [label=" bitSet", dir=none];
bitSet -> clone [label=" bitSet", dir=none];
bitSet -> toString [label=" bitSet", dir=none];
bitSet -> cardinality [label=" bitSet", dir=none];
cardinality -> size [label=" bitSet", dir=none];
cardinality -> equals [label=" bitSet", dir=none];
cardinality -> toByteArray [label=" bitSet", dir=none];
cardinality -> clone [label=" bitSet", dir=none];
cardinality -> toString [label=" bitSet", dir=none];
size -> equals [label=" bitSet", dir=none];
size -> toByteArray [label=" bitSet", dir=none];
size -> clone [label=" bitSet", dir=none];
size -> toString [label=" bitSet", dir=none];
stream -> nextClearBit [label=" bitSet", dir=none];
stream -> previousClearBit [label=" bitSet", dir=none];
stream -> set [label=" bitSet", dir=none];
stream -> setInclusive [label=" bitSet", dir=none];
stream -> toLongArray [label=" bitSet", dir=none];
stream -> clear [label=" bitSet", dir=none];
stream -> isEmpty [label=" bitSet", dir=none];
stream -> length [label=" bitSet", dir=none];
stream -> bitSet [label=" bitSet", dir=none];
stream -> cardinality [label=" bitSet", dir=none];
stream -> size [label=" bitSet", dir=none];
stream -> and [label=" bitSet", dir=none];
stream -> hashCode [label=" bitSet", dir=none];
stream -> get [label=" bitSet", dir=none];
stream -> equals [label=" bitSet", dir=none];
stream -> toByteArray [label=" bitSet", dir=none];
stream -> clone [label=" bitSet", dir=none];
stream -> xor [label=" bitSet", dir=none];
stream -> toString [label=" bitSet", dir=none];
stream -> flip [label=" bitSet", dir=none];
and -> nextClearBit [label=" bitSet", dir=none];
and -> previousClearBit [label=" bitSet", dir=none];
and -> set [label=" bitSet", dir=none];
and -> setInclusive [label=" bitSet", dir=none];
and -> toLongArray [label=" bitSet", dir=none];
and -> clear [label=" bitSet", dir=none];
and -> isEmpty [label=" bitSet", dir=none];
and -> length [label=" bitSet", dir=none];
and -> bitSet [label=" bitSet", dir=none];
and -> cardinality [label=" bitSet", dir=none];
and -> size [label=" bitSet", dir=none];
and -> hashCode [label=" bitSet", dir=none];
and -> get [label=" bitSet", dir=none];
and -> equals [label=" bitSet", dir=none];
and -> toByteArray [label=" bitSet", dir=none];
and -> clone [label=" bitSet", dir=none];
and -> xor [label=" bitSet", dir=none];
and -> toString [label=" bitSet", dir=none];
and -> flip [label=" bitSet", dir=none];
hashCode -> nextClearBit [label=" bitSet", dir=none];
hashCode -> previousClearBit [label=" bitSet", dir=none];
hashCode -> set [label=" bitSet", dir=none];
hashCode -> setInclusive [label=" bitSet", dir=none];
hashCode -> toLongArray [label=" bitSet", dir=none];
hashCode -> clear [label=" bitSet", dir=none];
hashCode -> isEmpty [label=" bitSet", dir=none];
hashCode -> length [label=" bitSet", dir=none];
hashCode -> bitSet [label=" bitSet", dir=none];
hashCode -> cardinality [label=" bitSet", dir=none];
hashCode -> size [label=" bitSet", dir=none];
hashCode -> get [label=" bitSet", dir=none];
hashCode -> equals [label=" bitSet", dir=none];
hashCode -> toByteArray [label=" bitSet", dir=none];
hashCode -> clone [label=" bitSet", dir=none];
hashCode -> xor [label=" bitSet", dir=none];
hashCode -> toString [label=" bitSet", dir=none];
hashCode -> flip [label=" bitSet", dir=none];
get -> nextClearBit [label=" bitSet", dir=none];
get -> previousClearBit [label=" bitSet", dir=none];
get -> set [label=" bitSet", dir=none];
get -> setInclusive [label=" bitSet", dir=none];
get -> toLongArray [label=" bitSet", dir=none];
get -> clear [label=" bitSet", dir=none];
get -> isEmpty [label=" bitSet", dir=none];
get -> length [label=" bitSet", dir=none];
get -> bitSet [label=" bitSet", dir=none];
get -> cardinality [label=" bitSet", dir=none];
get -> size [label=" bitSet", dir=none];
get -> equals [label=" bitSet", dir=none];
get -> toByteArray [label=" bitSet", dir=none];
get -> clone [label=" bitSet", dir=none];
get -> xor [label=" bitSet", dir=none];
get -> toString [label=" bitSet", dir=none];
get -> flip [label=" bitSet", dir=none];
equals -> toByteArray [label=" bitSet", dir=none];
equals -> clone [label=" bitSet", dir=none];
equals -> toString [label=" bitSet", dir=none];
toByteArray -> clone [label=" bitSet", dir=none];
toByteArray -> toString [label=" bitSet", dir=none];
clone -> toString [label=" bitSet", dir=none];
xor -> nextClearBit [label=" bitSet", dir=none];
xor -> previousClearBit [label=" bitSet", dir=none];
xor -> set [label=" bitSet", dir=none];
xor -> setInclusive [label=" bitSet", dir=none];
xor -> toLongArray [label=" bitSet", dir=none];
xor -> clear [label=" bitSet", dir=none];
xor -> isEmpty [label=" bitSet", dir=none];
xor -> length [label=" bitSet", dir=none];
xor -> bitSet [label=" bitSet", dir=none];
xor -> cardinality [label=" bitSet", dir=none];
xor -> size [label=" bitSet", dir=none];
xor -> equals [label=" bitSet", dir=none];
xor -> toByteArray [label=" bitSet", dir=none];
xor -> clone [label=" bitSet", dir=none];
xor -> toString [label=" bitSet", dir=none];
xor -> flip [label=" bitSet", dir=none];
flip -> nextClearBit [label=" bitSet", dir=none];
flip -> previousClearBit [label=" bitSet", dir=none];
flip -> set [label=" bitSet", dir=none];
flip -> setInclusive [label=" bitSet", dir=none];
flip -> toLongArray [label=" bitSet", dir=none];
flip -> clear [label=" bitSet", dir=none];
flip -> isEmpty [label=" bitSet", dir=none];
flip -> length [label=" bitSet", dir=none];
flip -> bitSet [label=" bitSet", dir=none];
flip -> cardinality [label=" bitSet", dir=none];
flip -> size [label=" bitSet", dir=none];
flip -> equals [label=" bitSet", dir=none];
flip -> toByteArray [label=" bitSet", dir=none];
flip -> clone [label=" bitSet", dir=none];
flip -> toString [label=" bitSet", dir=none];
}