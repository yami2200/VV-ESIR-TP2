digraph G {
testReplaceRecursive;
testReplaceChangedMap;
testGetSetSuffix;
testReplaceNoVariables;
testStaticReplacePrefixSuffix;
testReplacePartialString_noReplace;
testCyclicReplacement;
testGetSetValueDelimiter;
testReplaceEmptyKeys;
testConstructorMapFull;
testGetSetPrefix;
testReplaceEmpty;
testReplaceSolo;
testSamePrefixAndSuffix;
setUp;
testReplaceAdjacentAtEnd;
testReplaceIncompletePrefix;
testLANG1055;
testResolveVariable;
testReplaceAdjacentAtStart;
testReplaceInVariableDisabled;
testDefaultValueDelimiters;
testReplaceInVariableRecursive;
testReplaceToIdentical;
testReplaceNoPrefixNoSuffix;
testStaticReplaceSystemProperties;
testReplaceNoPrefixSuffix;
testStaticReplace;
tearDown;
testReplacePrefixNoSuffix;
testSubstitutePreserveEscape;
testReplaceUnknownKey;
testConstructorNoArgs;
testGetSetEscape;
testReplaceSimple;
testConstructorMapPrefixSuffix;
testReplaceWeirdPattens;
testSubstituteDefaultProperties;
testReplaceNull;
testReplaceComplexEscaping;
testReplaceEscaping;
testReplaceInVariable;
testReplaceSoloEscaping;
testReplaceRecursive -> testReplaceChangedMap [label=" values", dir=none];
testReplaceRecursive -> testReplaceAdjacentAtStart [label=" values", dir=none];
testReplaceRecursive -> testReplaceInVariableDisabled [label=" values", dir=none];
testReplaceRecursive -> testReplaceInVariableRecursive [label=" values", dir=none];
testReplaceRecursive -> testReplaceToIdentical [label=" values", dir=none];
testReplaceRecursive -> setUp [label=" values", dir=none];
testReplaceRecursive -> testReplaceAdjacentAtEnd [label=" values", dir=none];
testReplaceRecursive -> tearDown [label=" values", dir=none];
testReplaceRecursive -> testReplaceInVariable [label=" values", dir=none];
testReplaceChangedMap -> testReplaceAdjacentAtStart [label=" values", dir=none];
testReplaceChangedMap -> testReplaceInVariableDisabled [label=" values", dir=none];
testReplaceChangedMap -> testReplaceInVariableRecursive [label=" values", dir=none];
testReplaceChangedMap -> testReplaceToIdentical [label=" values", dir=none];
testReplaceChangedMap -> setUp [label=" values", dir=none];
testReplaceChangedMap -> testReplaceAdjacentAtEnd [label=" values", dir=none];
testReplaceChangedMap -> tearDown [label=" values", dir=none];
testReplaceChangedMap -> testReplaceInVariable [label=" values", dir=none];
testReplaceAdjacentAtStart -> testReplaceInVariableDisabled [label=" values", dir=none];
testReplaceAdjacentAtStart -> testReplaceInVariableRecursive [label=" values", dir=none];
testReplaceAdjacentAtStart -> testReplaceToIdentical [label=" values", dir=none];
testReplaceAdjacentAtStart -> tearDown [label=" values", dir=none];
testReplaceAdjacentAtStart -> testReplaceInVariable [label=" values", dir=none];
testReplaceInVariableDisabled -> testReplaceInVariableRecursive [label=" values", dir=none];
testReplaceInVariableDisabled -> testReplaceToIdentical [label=" values", dir=none];
testReplaceInVariableDisabled -> tearDown [label=" values", dir=none];
testReplaceInVariableDisabled -> testReplaceInVariable [label=" values", dir=none];
testReplaceInVariableRecursive -> testReplaceToIdentical [label=" values", dir=none];
testReplaceInVariableRecursive -> tearDown [label=" values", dir=none];
testReplaceInVariableRecursive -> testReplaceInVariable [label=" values", dir=none];
testReplaceToIdentical -> tearDown [label=" values", dir=none];
testReplaceToIdentical -> testReplaceInVariable [label=" values", dir=none];
setUp -> testReplaceAdjacentAtStart [label=" values", dir=none];
setUp -> testReplaceInVariableDisabled [label=" values", dir=none];
setUp -> testReplaceInVariableRecursive [label=" values", dir=none];
setUp -> testReplaceToIdentical [label=" values", dir=none];
setUp -> testReplaceAdjacentAtEnd [label=" values", dir=none];
setUp -> tearDown [label=" values", dir=none];
setUp -> testReplaceInVariable [label=" values", dir=none];
testReplaceAdjacentAtEnd -> testReplaceAdjacentAtStart [label=" values", dir=none];
testReplaceAdjacentAtEnd -> testReplaceInVariableDisabled [label=" values", dir=none];
testReplaceAdjacentAtEnd -> testReplaceInVariableRecursive [label=" values", dir=none];
testReplaceAdjacentAtEnd -> testReplaceToIdentical [label=" values", dir=none];
testReplaceAdjacentAtEnd -> tearDown [label=" values", dir=none];
testReplaceAdjacentAtEnd -> testReplaceInVariable [label=" values", dir=none];
tearDown -> testReplaceInVariable [label=" values", dir=none];
}