digraph G {
testThrows_FailableDoubleFunction_Throwable;
testBiConsumerAndThen;
testAcceptDoubleConsumer;
testThrows_FailableObjDoubleConsumer_Object_Throwable;
testFailableLongFunctionNop;
testAcceptObjLongConsumer;
testThrows_FailableToLongBiFunction_Object_Throwable;
testIntPredicateNegate;
testThrows_FailableBiFunction_String_IOException;
testAcceptLongConsumer;
testGetFromSupplier;
testIntConsumerAndThen;
testFailableLongToDoubleFunctionNop;
testThrows_FailableLongFunction_Throwable;
testThrows_FailableToLongFunction_String_IOException;
testThrows_FailableDoubleBinaryOperator_IOException;
testThrows_FailableShortSupplier_Throwable;
testAcceptIntConsumer;
testCallable;
testLongUnaryOperatorCompose;
testThrows_FailableIntSupplier_Throwable;
testThrows_FailableLongToDoubleFunction_IOException;
testAcceptObjIntConsumer;
testBiFunctionAndThen;
testFunctionAndThen;
testBiConsumer;
testBiPredicateAnd;
testApplyBiFunction;
testDoublePredicateOr;
testGetSupplier;
testFailableDoubleToLongFunctionNop;
testTryWithResources;
testThrows_FailablePredicate_String_IOException;
testFunctionCompose;
testThrows_FailableIntToDoubleFunction_IOException;
testFailableLongToIntFunctionNop;
testThrows_FailableLongToDoubleFunction_Throwable;
testLongPredicate;
testFailableBiFunctionNop;
testIntUnaryOperatorIdentity;
testThrows_FailablePredicate_Object_Throwable;
testDoublePredicateNegate;
testThrows_FailableDoubleConsumer_IOException;
testThrows_FailableIntToLongFunction_Throwable;
testBiPredicate;
testThrows_FailableDoubleFunction_IOException;
testBiPredicateNegate;
testThrows_FailableBiConsumer_String_IOException;
testThrows_FailableSupplier_Object_Throwable;
testDoubleUnaryOperatorAndThen;
testGetAsBooleanSupplier;
testGetAsShortSupplier;
testLongUnaryOperatorAndThen;
testFailableToIntFunctionNop;
testFailableDoubleToIntFunctionNop;
testThrows_FailableLongFunction_IOException;
testIntUnaryOperatorCompose;
testFailableToLongFunctionNop;
testThrows_FailableDoubleToIntFunction_IOException;
testPredicateOr;
testThrows_FailableFunction_Object_Throwable;
testThrows_FailableToDoubleFunction_String_IOException;
testDoubleUnaryOperatorCompose;
testThrows_FailableConsumer_Object_Throwable;
testThrows_FailableToIntBiFunction_String_IOException;
testPredicateAnd;
testThrows_FailableObjDoubleConsumer_String_IOException;
testGetAsIntSupplier;
testFailableIntFunctionNop;
testIntUnaryOperatorAndThen;
testThrows_FailableBiPredicate_String_IOException;
testThrows_FailableConsumer_String_IOException;
testFunction;
testThrows_FailableLongConsumer_Throwable;
testThrows_FailableFunction_String_IOException;
testThrows_FailableSupplier_String_IOException;
testFailableConsumerNop;
testThrows_FailableLongToIntFunction_Throwable;
testAcceptConsumer;
testConsumerAndThen;
testThrows_FailableDoubleConsumer_Throwable;
testThrows_FailableLongBinaryOperator_Throwable;
testThrows_FailableIntConsumer_Throwable;
testThrows_FailableToLongFunction_Object_Throwable;
testThrows_FailableLongToIntFunction_IOException;
testAsConsumer;
testThrows_FailableCallable_String_IOException;
testApplyDoubleBinaryOperator;
testLongPredicateNegate;
testFailableToDoubleFunctionNop;
testThrows_FailableIntBinaryOperator_Throwable;
testBiPredicateOr;
testDoubleConsumerAndThen;
testFailableObjIntConsumerNop;
testThrows_FailableDoubleToIntFunction_Throwable;
testThrows_FailableToDoubleBiFunction_String_IOException;
testThrows_FailableDoubleSupplier_Throwable;
testThrows_FailableLongSupplier_Throwable;
testFailableToIntBiFunctionNop;
testThrows_FailableIntFunction_String_IOException;
testThrows_FailableLongSupplier_IOException;
testThrows_FailableToIntFunction_String_IOException;
testIntPredicateOr;
testThrows_FailableIntConsumer_IOException;
testFailableObjDoubleConsumerNop;
testThrows_FailableIntToDoubleFunction_Throwable;
testThrows_FailableDoubleBinaryOperator_Throwable;
testFailableObjLongConsumerNop;
testThrows_FailableBiFunction_Object_Throwable;
testThrows_FailableRunnable_Throwable;
testAsCallable;
testThrows_FailableCallable_Object_Throwable;
testThrows_FailableToLongBiFunction_String_IOException;
testLongPredicateOr;
testFailableToDoubleBiFunctionNop;
testFailableIntToDoubleFunctionNop;
testThrows_FailableRunnable_IOException;
testThrows_FailableToDoubleBiFunction_Object_Throwable;
testBiFunction;
testThrows_FailableIntFunction_Object_Throwable;
testThrows_FailableBiConsumer_Object_Throwable;
testAcceptObjDoubleConsumer;
testGetAsDoubleSupplier;
testThrows_FailableToIntBiFunction_Object_Throwable;
testFailableIntToLongFunctionNop;
testThrows_FailableObjIntConsumer_Object_Throwable;
testPredicateNegate;
testIntPredicate;
testRunnable;
testThrows_FailableShortSupplier_IOException;
testIntPredicateAnd;
testLongConsumerAndThen;
testThrows_FailableBooleanSupplier_IOException;
testPredicate;
testThrows_FailableLongBinaryOperator_IOException;
testThrows_FailableBiPredicate_Object_Throwable;
testThrows_FailableIntSupplier_IOException;
testDoubleUnaryOperatorIdentity;
testThrows_FailableDoubleToLongFunction_IOException;
testThrows_FailableToIntFunction_Object_Throwable;
testThrows_FailableObjIntConsumer_String_IOException;
testThrows_FailableObjLongConsumer_String_IOException;
testFailableToLongBiFunctionNop;
testThrows_FailableBooleanSupplier_Throwable;
testThrows_FailableLongConsumer_IOException;
testThrows_FailableObjLongConsumer_Object_Throwable;
testFunctionIdentity;
testThrows_FailableDoubleSupplier_IOException;
testThrows_FailableIntToLongFunction_IOException;
testAsSupplier;
testApplyFunction;
testAsRunnable;
testAcceptBiConsumer;
testThrows_FailableDoubleToLongFunction_Throwable;
testLongUnaryOperatorIdentity;
testThrows_FailableToDoubleFunction_Object_Throwable;
testDoublePredicate;
testFailableDoubleFunctionNop;
testDoublePredicateAnd;
testGetAsLongSupplier;
testThrows_FailableIntBinaryOperator_IOException;
testLongPredicateAnd;
testApplyDoubleBinaryOperator -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyDoubleBinaryOperator -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyDoubleBinaryOperator -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyDoubleBinaryOperator -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyDoubleBinaryOperator -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyDoubleBinaryOperator -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptObjDoubleConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjDoubleConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjDoubleConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjDoubleConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjDoubleConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsDoubleSupplier -> testLongConsumerAndThen [label=" ERROR", dir=none];
testGetAsDoubleSupplier -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsDoubleSupplier -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsDoubleSupplier -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumerAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptDoubleConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptObjLongConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetAsBooleanSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetAsShortSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptLongConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testBiConsumerAndThen -> testIntConsumerAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptIntConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetAsIntSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testBiConsumerAndThen -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testFunction [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptObjIntConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testApplyFunction [label=" ERROR", dir=none];
testBiConsumerAndThen -> testBiConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testConsumerAndThen [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testBiConsumerAndThen -> testApplyBiFunction [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testBiFunction [label=" ERROR", dir=none];
testBiConsumerAndThen -> testTryWithResources [label=" ERROR", dir=none];
testBiConsumerAndThen -> testFunctionCompose [label=" ERROR", dir=none];
testBiConsumerAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testBiConsumerAndThen -> testAsConsumer [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptDoubleConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptObjLongConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptLongConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testIntConsumerAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptObjIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testAcceptDoubleConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptDoubleConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptObjLongConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testAcceptLongConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testIntConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testAcceptIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testAcceptObjIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testAcceptObjLongConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjLongConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testDoubleConsumerAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testBiFunction [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testApplyFunction [label=" ERROR", dir=none];
testDoubleConsumerAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testLongConsumerAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testLongConsumerAndThen -> testApplyFunction [label=" ERROR", dir=none];
testLongConsumerAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testGetAsIntSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testApplyFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testGetAsBooleanSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testAcceptConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testGetAsShortSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testBiFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorAndThen -> testAsConsumer [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testGetAsBooleanSupplier -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testLongConsumerAndThen [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testConsumerAndThen [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testGetAsBooleanSupplier -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsBooleanSupplier -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testGetAsShortSupplier -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testGetAsShortSupplier -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetAsShortSupplier -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testGetAsShortSupplier -> testLongConsumerAndThen [label=" ERROR", dir=none];
testGetAsShortSupplier -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetAsShortSupplier -> testConsumerAndThen [label=" ERROR", dir=none];
testGetAsShortSupplier -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testGetAsShortSupplier -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsShortSupplier -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testLongUnaryOperatorAndThen -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testGetAsIntSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testFunction [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testApplyFunction [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testAcceptConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testBiFunction [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorAndThen -> testAsConsumer [label=" ERROR", dir=none];
testAcceptLongConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptLongConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptLongConsumer -> testIntConsumerAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptLongConsumer -> testAcceptIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptLongConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testAcceptObjIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptLongConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testAcceptLongConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptLongConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testIntUnaryOperatorCompose -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testGetAsIntSupplier [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testFunction [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testApplyFunction [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testLongConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testAcceptConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testAcceptBiConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testBiFunction [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testGetAsLongSupplier [label=" ERROR", dir=none];
testIntUnaryOperatorCompose -> testAsConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetAsBooleanSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetAsShortSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testIntConsumerAndThen -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAcceptIntConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetAsIntSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testIntConsumerAndThen -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testFunction [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAcceptObjIntConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testApplyFunction [label=" ERROR", dir=none];
testIntConsumerAndThen -> testBiConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAcceptConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testConsumerAndThen [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testIntConsumerAndThen -> testApplyBiFunction [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testBiFunction [label=" ERROR", dir=none];
testIntConsumerAndThen -> testTryWithResources [label=" ERROR", dir=none];
testIntConsumerAndThen -> testFunctionCompose [label=" ERROR", dir=none];
testIntConsumerAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testIntConsumerAndThen -> testAsConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testGetAsIntSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testApplyFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testLongConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testAcceptConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testConsumerAndThen [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testAcceptBiConsumer [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testBiFunction [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testGetAsLongSupplier [label=" ERROR", dir=none];
testDoubleUnaryOperatorCompose -> testAsConsumer [label=" ERROR", dir=none];
testAcceptIntConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptIntConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptIntConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptIntConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testLongUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptIntConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testAcceptObjIntConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptIntConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testAcceptIntConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptIntConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testGetAsIntSupplier -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetAsIntSupplier -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testGetAsIntSupplier -> testLongConsumerAndThen [label=" ERROR", dir=none];
testGetAsIntSupplier -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testConsumerAndThen [label=" ERROR", dir=none];
testGetAsIntSupplier -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetAsIntSupplier -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testLongUnaryOperatorCompose -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testLongConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetAsBooleanSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetAsShortSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetAsIntSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testFunction [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testAcceptObjIntConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testApplyFunction [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testBiConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testAcceptConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testConsumerAndThen [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testAcceptBiConsumer [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testApplyBiFunction [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testBiFunction [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testTryWithResources [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testFunctionCompose [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testGetAsLongSupplier [label=" ERROR", dir=none];
testLongUnaryOperatorCompose -> testAsConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testAcceptConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testBiFunction [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testFunction [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testApplyFunction [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testIntUnaryOperatorAndThen -> testAsConsumer [label=" ERROR", dir=none];
testFunction -> testLongConsumerAndThen [label=" ERROR", dir=none];
testFunction -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testConsumerAndThen [label=" ERROR", dir=none];
testFunction -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testFunction -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testFunction -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunction -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptObjIntConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testAcceptObjIntConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptObjIntConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyFunction -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyFunction -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testBiConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testBiConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testBiConsumer -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumer -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumer -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testBiConsumer -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testBiConsumer -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testBiConsumer -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testBiConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testApplyBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testFunctionCompose [label=" ERROR", dir=none];
testBiConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAcceptConsumer -> testConsumerAndThen [label=" ERROR", dir=none];
testAcceptConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAcceptConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAcceptConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAcceptConsumer -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testConsumerAndThen -> testLongConsumerAndThen [label=" ERROR", dir=none];
testConsumerAndThen -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testConsumerAndThen -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testConsumerAndThen -> testAcceptBiConsumer [label=" ERROR", dir=none];
testConsumerAndThen -> testBiFunction [label=" ERROR", dir=none];
testConsumerAndThen -> testApplyFunction [label=" ERROR", dir=none];
testConsumerAndThen -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testConsumerAndThen -> testGetAsLongSupplier [label=" ERROR", dir=none];
testConsumerAndThen -> testAsConsumer [label=" ERROR", dir=none];
testAcceptBiConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testApplyBiFunction -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testApplyBiFunction -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testLongConsumerAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testConsumerAndThen [label=" ERROR", dir=none];
testApplyBiFunction -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testGetSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testApplyBiFunction -> testFunctionCompose [label=" ERROR", dir=none];
testApplyBiFunction -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testApplyBiFunction -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testGetSupplier -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testGetSupplier -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetSupplier -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testGetSupplier -> testLongConsumerAndThen [label=" ERROR", dir=none];
testGetSupplier -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetSupplier -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testGetSupplier -> testConsumerAndThen [label=" ERROR", dir=none];
testGetSupplier -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testTryWithResources [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testGetSupplier -> testFunctionCompose [label=" ERROR", dir=none];
testGetSupplier -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testGetSupplier -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiFunction -> testLongConsumerAndThen [label=" ERROR", dir=none];
testBiFunction -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiFunction -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiFunction -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiFunction -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testBiFunction -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testTryWithResources -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testTryWithResources -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testGetAsIntSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testTryWithResources -> testFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testTryWithResources -> testLongConsumerAndThen [label=" ERROR", dir=none];
testTryWithResources -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testTryWithResources -> testGetAsBooleanSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testAcceptConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testGetAsShortSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testTryWithResources -> testConsumerAndThen [label=" ERROR", dir=none];
testTryWithResources -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testTryWithResources -> testFunctionCompose [label=" ERROR", dir=none];
testTryWithResources -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testTryWithResources -> testAsConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testFunctionCompose -> testDoubleUnaryOperatorCompose [label=" ERROR", dir=none];
testFunctionCompose -> testAcceptObjDoubleConsumer [label=" ERROR", dir=none];
testFunctionCompose -> testGetAsDoubleSupplier [label=" ERROR", dir=none];
testFunctionCompose -> testGetAsIntSupplier [label=" ERROR", dir=none];
testFunctionCompose -> testIntUnaryOperatorAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testFunction [label=" ERROR", dir=none];
testFunctionCompose -> testApplyFunction [label=" ERROR", dir=none];
testFunctionCompose -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testLongConsumerAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testDoubleUnaryOperatorAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testGetAsBooleanSupplier [label=" ERROR", dir=none];
testFunctionCompose -> testAcceptConsumer [label=" ERROR", dir=none];
testFunctionCompose -> testGetAsShortSupplier [label=" ERROR", dir=none];
testFunctionCompose -> testLongUnaryOperatorAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testConsumerAndThen [label=" ERROR", dir=none];
testFunctionCompose -> testAcceptBiConsumer [label=" ERROR", dir=none];
testFunctionCompose -> testBiFunction [label=" ERROR", dir=none];
testFunctionCompose -> testIntUnaryOperatorCompose [label=" ERROR", dir=none];
testFunctionCompose -> testGetAsLongSupplier [label=" ERROR", dir=none];
testFunctionCompose -> testAsConsumer [label=" ERROR", dir=none];
testAsConsumer -> testLongConsumerAndThen [label=" ERROR", dir=none];
testAsConsumer -> testApplyDoubleBinaryOperator [label=" ILLEGAL_STATE_EXCEPTION", dir=none];
testAsConsumer -> testAcceptObjDoubleConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAsConsumer -> testGetAsDoubleSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAsConsumer -> testAcceptBiConsumer [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAsConsumer -> testBiFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAsConsumer -> testApplyFunction [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
testAsConsumer -> testDoubleConsumerAndThen [label=" ERROR", dir=none];
testAsConsumer -> testGetAsLongSupplier [label=" ILLEGAL_STATE_EXCEPTION, ERROR", dir=none];
}