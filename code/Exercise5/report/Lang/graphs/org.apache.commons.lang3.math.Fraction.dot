digraph G {
getNumerator;
reduce;
add;
invert;
intValue;
divideBy;
subtract;
floatValue;
doubleValue;
compareTo;
longValue;
getReducedFraction;
getDenominator;
getProperNumerator;
getProperWhole;
abs;
negate;
hashCode;
toProperString;
equals;
pow;
toString;
multiplyBy;
getFraction;
getNumerator -> reduce [label=" numerator", dir=none];
getNumerator -> invert [label=" numerator", dir=none];
getNumerator -> intValue [label=" numerator", dir=none];
getNumerator -> divideBy [label=" numerator", dir=none];
getNumerator -> floatValue [label=" numerator", dir=none];
getNumerator -> doubleValue [label=" numerator", dir=none];
getNumerator -> compareTo [label=" numerator", dir=none];
getNumerator -> longValue [label=" numerator", dir=none];
getNumerator -> getReducedFraction [label=" numerator", dir=none];
getNumerator -> getProperNumerator [label=" numerator", dir=none];
getNumerator -> getProperWhole [label=" numerator", dir=none];
getNumerator -> abs [label=" numerator", dir=none];
getNumerator -> negate [label=" numerator", dir=none];
getNumerator -> hashCode [label=" numerator", dir=none];
getNumerator -> toProperString [label=" numerator", dir=none];
getNumerator -> equals [label=" numerator", dir=none];
getNumerator -> pow [label=" numerator", dir=none];
getNumerator -> toString [label=" numerator", dir=none];
getNumerator -> multiplyBy [label=" numerator", dir=none];
reduce -> invert [label=" numerator, denominator", dir=none];
reduce -> intValue [label=" numerator, denominator", dir=none];
reduce -> divideBy [label=" ZERO, numerator, denominator", dir=none];
reduce -> floatValue [label=" numerator, denominator", dir=none];
reduce -> doubleValue [label=" numerator, denominator", dir=none];
reduce -> compareTo [label=" numerator, denominator", dir=none];
reduce -> longValue [label=" numerator, denominator", dir=none];
reduce -> getReducedFraction [label=" ZERO, numerator, denominator", dir=none];
reduce -> getDenominator [label=" denominator", dir=none];
reduce -> getProperNumerator [label=" numerator, denominator", dir=none];
reduce -> getProperWhole [label=" numerator, denominator", dir=none];
reduce -> abs [label=" numerator, denominator", dir=none];
reduce -> negate [label=" numerator, denominator", dir=none];
reduce -> hashCode [label=" numerator, denominator", dir=none];
reduce -> toProperString [label=" numerator, denominator", dir=none];
reduce -> equals [label=" numerator, denominator", dir=none];
reduce -> pow [label=" ZERO, numerator, denominator", dir=none];
reduce -> toString [label=" numerator, denominator", dir=none];
reduce -> multiplyBy [label=" ZERO, numerator, denominator", dir=none];
invert -> intValue [label=" numerator, denominator", dir=none];
invert -> divideBy [label=" numerator, denominator", dir=none];
invert -> floatValue [label=" numerator, denominator", dir=none];
invert -> doubleValue [label=" numerator, denominator", dir=none];
invert -> compareTo [label=" numerator, denominator", dir=none];
invert -> longValue [label=" numerator, denominator", dir=none];
invert -> getReducedFraction [label=" numerator, denominator", dir=none];
invert -> getDenominator [label=" denominator", dir=none];
invert -> getProperNumerator [label=" numerator, denominator", dir=none];
invert -> getProperWhole [label=" numerator, denominator", dir=none];
invert -> abs [label=" numerator, denominator", dir=none];
invert -> negate [label=" numerator, denominator", dir=none];
invert -> hashCode [label=" numerator, denominator", dir=none];
invert -> toProperString [label=" numerator, denominator", dir=none];
invert -> equals [label=" numerator, denominator", dir=none];
invert -> pow [label=" numerator, denominator", dir=none];
invert -> toString [label=" numerator, denominator", dir=none];
invert -> multiplyBy [label=" numerator, denominator", dir=none];
intValue -> divideBy [label=" numerator, denominator", dir=none];
intValue -> floatValue [label=" numerator, denominator", dir=none];
intValue -> doubleValue [label=" numerator, denominator", dir=none];
intValue -> compareTo [label=" numerator, denominator", dir=none];
intValue -> longValue [label=" numerator, denominator", dir=none];
intValue -> getReducedFraction [label=" numerator, denominator", dir=none];
intValue -> getDenominator [label=" denominator", dir=none];
intValue -> getProperNumerator [label=" numerator, denominator", dir=none];
intValue -> getProperWhole [label=" numerator, denominator", dir=none];
intValue -> abs [label=" numerator, denominator", dir=none];
intValue -> negate [label=" numerator, denominator", dir=none];
intValue -> hashCode [label=" numerator, denominator", dir=none];
intValue -> toProperString [label=" numerator, denominator", dir=none];
intValue -> equals [label=" numerator, denominator", dir=none];
intValue -> pow [label=" numerator, denominator", dir=none];
intValue -> toString [label=" numerator, denominator", dir=none];
intValue -> multiplyBy [label=" numerator, denominator", dir=none];
divideBy -> floatValue [label=" numerator, denominator", dir=none];
divideBy -> doubleValue [label=" numerator, denominator", dir=none];
divideBy -> compareTo [label=" numerator, denominator", dir=none];
divideBy -> longValue [label=" numerator, denominator", dir=none];
divideBy -> getReducedFraction [label=" ZERO, numerator, denominator", dir=none];
divideBy -> getDenominator [label=" denominator", dir=none];
divideBy -> getProperNumerator [label=" numerator, denominator", dir=none];
divideBy -> getProperWhole [label=" numerator, denominator", dir=none];
divideBy -> abs [label=" numerator, denominator", dir=none];
divideBy -> negate [label=" numerator, denominator", dir=none];
divideBy -> hashCode [label=" numerator, denominator", dir=none];
divideBy -> toProperString [label=" numerator, denominator", dir=none];
divideBy -> equals [label=" numerator, denominator", dir=none];
divideBy -> pow [label=" ZERO, numerator, denominator", dir=none];
divideBy -> toString [label=" numerator, denominator", dir=none];
divideBy -> multiplyBy [label=" ZERO, numerator, denominator", dir=none];
floatValue -> doubleValue [label=" numerator, denominator", dir=none];
floatValue -> compareTo [label=" numerator, denominator", dir=none];
floatValue -> longValue [label=" numerator, denominator", dir=none];
floatValue -> getReducedFraction [label=" numerator, denominator", dir=none];
floatValue -> getDenominator [label=" denominator", dir=none];
floatValue -> getProperNumerator [label=" numerator, denominator", dir=none];
floatValue -> getProperWhole [label=" numerator, denominator", dir=none];
floatValue -> abs [label=" numerator, denominator", dir=none];
floatValue -> negate [label=" numerator, denominator", dir=none];
floatValue -> hashCode [label=" numerator, denominator", dir=none];
floatValue -> toProperString [label=" numerator, denominator", dir=none];
floatValue -> equals [label=" numerator, denominator", dir=none];
floatValue -> pow [label=" numerator, denominator", dir=none];
floatValue -> toString [label=" numerator, denominator", dir=none];
floatValue -> multiplyBy [label=" numerator, denominator", dir=none];
doubleValue -> compareTo [label=" numerator, denominator", dir=none];
doubleValue -> longValue [label=" numerator, denominator", dir=none];
doubleValue -> getReducedFraction [label=" numerator, denominator", dir=none];
doubleValue -> getDenominator [label=" denominator", dir=none];
doubleValue -> getProperNumerator [label=" numerator, denominator", dir=none];
doubleValue -> getProperWhole [label=" numerator, denominator", dir=none];
doubleValue -> abs [label=" numerator, denominator", dir=none];
doubleValue -> negate [label=" numerator, denominator", dir=none];
doubleValue -> hashCode [label=" numerator, denominator", dir=none];
doubleValue -> toProperString [label=" numerator, denominator", dir=none];
doubleValue -> equals [label=" numerator, denominator", dir=none];
doubleValue -> pow [label=" numerator, denominator", dir=none];
doubleValue -> toString [label=" numerator, denominator", dir=none];
doubleValue -> multiplyBy [label=" numerator, denominator", dir=none];
compareTo -> longValue [label=" numerator, denominator", dir=none];
compareTo -> getReducedFraction [label=" numerator, denominator", dir=none];
compareTo -> getDenominator [label=" denominator", dir=none];
compareTo -> getProperNumerator [label=" numerator, denominator", dir=none];
compareTo -> getProperWhole [label=" numerator, denominator", dir=none];
compareTo -> abs [label=" numerator, denominator", dir=none];
compareTo -> negate [label=" numerator, denominator", dir=none];
compareTo -> hashCode [label=" numerator, denominator", dir=none];
compareTo -> toProperString [label=" numerator, denominator", dir=none];
compareTo -> equals [label=" numerator, denominator", dir=none];
compareTo -> pow [label=" numerator, denominator", dir=none];
compareTo -> toString [label=" numerator, denominator", dir=none];
compareTo -> multiplyBy [label=" numerator, denominator", dir=none];
longValue -> getProperNumerator [label=" numerator, denominator", dir=none];
longValue -> getProperWhole [label=" numerator, denominator", dir=none];
longValue -> abs [label=" numerator, denominator", dir=none];
longValue -> negate [label=" numerator, denominator", dir=none];
longValue -> hashCode [label=" numerator, denominator", dir=none];
longValue -> toProperString [label=" numerator, denominator", dir=none];
longValue -> equals [label=" numerator, denominator", dir=none];
longValue -> pow [label=" numerator, denominator", dir=none];
longValue -> toString [label=" numerator, denominator", dir=none];
longValue -> multiplyBy [label=" numerator, denominator", dir=none];
longValue -> getReducedFraction [label=" numerator, denominator", dir=none];
longValue -> getDenominator [label=" denominator", dir=none];
getReducedFraction -> getProperNumerator [label=" denominator, numerator", dir=none];
getReducedFraction -> getProperWhole [label=" denominator, numerator", dir=none];
getReducedFraction -> abs [label=" denominator, numerator", dir=none];
getReducedFraction -> negate [label=" denominator, numerator", dir=none];
getReducedFraction -> hashCode [label=" denominator, numerator", dir=none];
getReducedFraction -> toProperString [label=" denominator, numerator", dir=none];
getReducedFraction -> equals [label=" denominator, numerator", dir=none];
getReducedFraction -> pow [label=" ZERO, denominator, numerator", dir=none];
getReducedFraction -> toString [label=" denominator, numerator", dir=none];
getReducedFraction -> multiplyBy [label=" ZERO, denominator, numerator", dir=none];
getReducedFraction -> getDenominator [label=" denominator", dir=none];
getDenominator -> getProperNumerator [label=" denominator", dir=none];
getDenominator -> getProperWhole [label=" denominator", dir=none];
getDenominator -> abs [label=" denominator", dir=none];
getDenominator -> negate [label=" denominator", dir=none];
getDenominator -> hashCode [label=" denominator", dir=none];
getDenominator -> toProperString [label=" denominator", dir=none];
getDenominator -> equals [label=" denominator", dir=none];
getDenominator -> pow [label=" denominator", dir=none];
getDenominator -> toString [label=" denominator", dir=none];
getDenominator -> multiplyBy [label=" denominator", dir=none];
getProperNumerator -> getProperWhole [label=" numerator, denominator", dir=none];
getProperNumerator -> abs [label=" numerator, denominator", dir=none];
getProperNumerator -> negate [label=" numerator, denominator", dir=none];
getProperNumerator -> hashCode [label=" numerator, denominator", dir=none];
getProperNumerator -> toProperString [label=" numerator, denominator", dir=none];
getProperNumerator -> equals [label=" numerator, denominator", dir=none];
getProperNumerator -> pow [label=" numerator, denominator", dir=none];
getProperNumerator -> toString [label=" numerator, denominator", dir=none];
getProperNumerator -> multiplyBy [label=" numerator, denominator", dir=none];
getProperWhole -> abs [label=" numerator, denominator", dir=none];
getProperWhole -> negate [label=" numerator, denominator", dir=none];
getProperWhole -> hashCode [label=" numerator, denominator", dir=none];
getProperWhole -> toProperString [label=" numerator, denominator", dir=none];
getProperWhole -> equals [label=" numerator, denominator", dir=none];
getProperWhole -> pow [label=" numerator, denominator", dir=none];
getProperWhole -> toString [label=" numerator, denominator", dir=none];
getProperWhole -> multiplyBy [label=" numerator, denominator", dir=none];
abs -> negate [label=" numerator, denominator", dir=none];
abs -> hashCode [label=" numerator, denominator", dir=none];
abs -> toProperString [label=" numerator, denominator", dir=none];
abs -> equals [label=" numerator, denominator", dir=none];
abs -> pow [label=" numerator, denominator", dir=none];
abs -> toString [label=" numerator, denominator", dir=none];
abs -> multiplyBy [label=" numerator, denominator", dir=none];
negate -> hashCode [label=" numerator, denominator", dir=none];
negate -> toProperString [label=" numerator, denominator", dir=none];
negate -> equals [label=" numerator, denominator", dir=none];
negate -> pow [label=" numerator, denominator", dir=none];
negate -> toString [label=" numerator, denominator", dir=none];
negate -> multiplyBy [label=" numerator, denominator", dir=none];
hashCode -> toProperString [label=" numerator, denominator", dir=none];
hashCode -> equals [label=" numerator, denominator", dir=none];
hashCode -> pow [label=" numerator, denominator", dir=none];
hashCode -> toString [label=" numerator, denominator", dir=none];
hashCode -> multiplyBy [label=" numerator, denominator", dir=none];
toProperString -> equals [label=" numerator, denominator", dir=none];
toProperString -> pow [label=" numerator, denominator", dir=none];
toProperString -> toString [label=" toString, numerator, denominator", dir=none];
toProperString -> multiplyBy [label=" numerator, denominator", dir=none];
equals -> pow [label=" numerator, denominator", dir=none];
equals -> toString [label=" numerator, denominator", dir=none];
equals -> multiplyBy [label=" numerator, denominator", dir=none];
pow -> toString [label=" numerator, denominator", dir=none];
pow -> multiplyBy [label=" ZERO, numerator, denominator", dir=none];
toString -> multiplyBy [label=" numerator, denominator", dir=none];
}