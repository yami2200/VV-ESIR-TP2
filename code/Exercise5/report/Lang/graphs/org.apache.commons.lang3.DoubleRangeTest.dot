digraph G {
testIsBefore;
testGetMaximum;
testIsOverlappedByRange;
testContainsInt;
testElementCompareTo;
testFitNull;
setUp;
testRangeOfChars;
testEqualsObject;
testIntersectionWith;
testIsOverlappedByIntegerRange;
testIsEndedBy;
testIsBeforeRange;
testFit;
testIsAfter;
testHashCode;
testIntersectionWithNull;
testOfWithContains;
testSerializing;
testIsAfterRange;
testContainsRange;
testToString;
testIsBeforeIntegerRange;
testIsWithCompareRange;
testIsStartedBy;
testToStringFormat;
testGetMinimum;
testIntersectionWithNonOverlapping;
testIsBefore -> testIntersectionWith [label=" range1", dir=none];
testIsBefore -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testIsBefore -> testIsEndedBy [label=" range1", dir=none];
testIsBefore -> testGetMaximum [label=" range1", dir=none];
testIsBefore -> testIsBeforeRange [label=" range1", dir=none];
testIsBefore -> testIsOverlappedByRange [label=" range1", dir=none];
testIsBefore -> testContainsInt [label=" range1", dir=none];
testIsBefore -> testFit [label=" range1", dir=none];
testIsBefore -> testIsAfter [label=" range1", dir=none];
testIsBefore -> testElementCompareTo [label=" range1", dir=none];
testIsBefore -> testHashCode [label=" range1", dir=none];
testIsBefore -> testIntersectionWithNull [label=" range1", dir=none];
testIsBefore -> testFitNull [label=" range1", dir=none];
testIsBefore -> testSerializing [label=" range1", dir=none];
testIsBefore -> testIsAfterRange [label=" range1", dir=none];
testIsBefore -> testContainsRange [label=" range1", dir=none];
testIsBefore -> testToString [label=" range1", dir=none];
testIsBefore -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsBefore -> testIsStartedBy [label=" range1", dir=none];
testIsBefore -> setUp [label=" range1", dir=none];
testIsBefore -> testToStringFormat [label=" range1", dir=none];
testIsBefore -> testGetMinimum [label=" range1", dir=none];
testIsBefore -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsBefore -> testEqualsObject [label=" range1", dir=none];
testIntersectionWith -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testIntersectionWith -> testIsEndedBy [label=" range1", dir=none];
testIntersectionWith -> testIsBeforeRange [label=" range1", dir=none];
testIntersectionWith -> testFit [label=" range1", dir=none];
testIntersectionWith -> testIsAfter [label=" range1", dir=none];
testIntersectionWith -> testHashCode [label=" range1", dir=none];
testIntersectionWith -> testIntersectionWithNull [label=" range1", dir=none];
testIntersectionWith -> testSerializing [label=" range1", dir=none];
testIntersectionWith -> testIsAfterRange [label=" range1", dir=none];
testIntersectionWith -> testContainsRange [label=" range1", dir=none];
testIntersectionWith -> testToString [label=" range1", dir=none];
testIntersectionWith -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIntersectionWith -> testIsStartedBy [label=" range1", dir=none];
testIntersectionWith -> testToStringFormat [label=" range1", dir=none];
testIntersectionWith -> testGetMinimum [label=" range1", dir=none];
testIntersectionWith -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsEndedBy [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsBeforeRange [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testFit [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsAfter [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testHashCode [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIntersectionWithNull [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testSerializing [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsAfterRange [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testContainsRange [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testToString [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIsStartedBy [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testToStringFormat [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testGetMinimum [label=" range1", dir=none];
testIsOverlappedByIntegerRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsEndedBy -> testIsBeforeRange [label=" range1", dir=none];
testIsEndedBy -> testFit [label=" range1", dir=none];
testIsEndedBy -> testIsAfter [label=" range1", dir=none];
testIsEndedBy -> testHashCode [label=" range1", dir=none];
testIsEndedBy -> testIntersectionWithNull [label=" range1", dir=none];
testIsEndedBy -> testSerializing [label=" range1", dir=none];
testIsEndedBy -> testIsAfterRange [label=" range1", dir=none];
testIsEndedBy -> testContainsRange [label=" range1", dir=none];
testIsEndedBy -> testToString [label=" range1", dir=none];
testIsEndedBy -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsEndedBy -> testIsStartedBy [label=" range1", dir=none];
testIsEndedBy -> testToStringFormat [label=" range1", dir=none];
testIsEndedBy -> testGetMinimum [label=" range1", dir=none];
testIsEndedBy -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testGetMaximum -> testIntersectionWith [label=" range1", dir=none];
testGetMaximum -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testGetMaximum -> testIsEndedBy [label=" range1", dir=none];
testGetMaximum -> testIsBeforeRange [label=" range1", dir=none];
testGetMaximum -> testIsOverlappedByRange [label=" range1", dir=none];
testGetMaximum -> testContainsInt [label=" range1", dir=none];
testGetMaximum -> testFit [label=" range1", dir=none];
testGetMaximum -> testIsAfter [label=" range1", dir=none];
testGetMaximum -> testElementCompareTo [label=" range1", dir=none];
testGetMaximum -> testHashCode [label=" range1", dir=none];
testGetMaximum -> testIntersectionWithNull [label=" range1", dir=none];
testGetMaximum -> testFitNull [label=" range1", dir=none];
testGetMaximum -> testSerializing [label=" range1", dir=none];
testGetMaximum -> testIsAfterRange [label=" range1", dir=none];
testGetMaximum -> testContainsRange [label=" range1", dir=none];
testGetMaximum -> testToString [label=" range1", dir=none];
testGetMaximum -> testIsBeforeIntegerRange [label=" range1", dir=none];
testGetMaximum -> testIsStartedBy [label=" range1", dir=none];
testGetMaximum -> setUp [label=" range1", dir=none];
testGetMaximum -> testToStringFormat [label=" range1", dir=none];
testGetMaximum -> testGetMinimum [label=" range1", dir=none];
testGetMaximum -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testGetMaximum -> testEqualsObject [label=" range1", dir=none];
testIsBeforeRange -> testFit [label=" range1", dir=none];
testIsBeforeRange -> testIsAfter [label=" range1", dir=none];
testIsBeforeRange -> testHashCode [label=" range1", dir=none];
testIsBeforeRange -> testIntersectionWithNull [label=" range1", dir=none];
testIsBeforeRange -> testSerializing [label=" range1", dir=none];
testIsBeforeRange -> testIsAfterRange [label=" range1", dir=none];
testIsBeforeRange -> testContainsRange [label=" range1", dir=none];
testIsBeforeRange -> testToString [label=" range1", dir=none];
testIsBeforeRange -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsBeforeRange -> testIsStartedBy [label=" range1", dir=none];
testIsBeforeRange -> testToStringFormat [label=" range1", dir=none];
testIsBeforeRange -> testGetMinimum [label=" range1", dir=none];
testIsBeforeRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsOverlappedByRange -> testIntersectionWith [label=" range1", dir=none];
testIsOverlappedByRange -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testIsOverlappedByRange -> testIsEndedBy [label=" range1", dir=none];
testIsOverlappedByRange -> testIsBeforeRange [label=" range1", dir=none];
testIsOverlappedByRange -> testContainsInt [label=" range1", dir=none];
testIsOverlappedByRange -> testFit [label=" range1", dir=none];
testIsOverlappedByRange -> testIsAfter [label=" range1", dir=none];
testIsOverlappedByRange -> testElementCompareTo [label=" range1", dir=none];
testIsOverlappedByRange -> testHashCode [label=" range1", dir=none];
testIsOverlappedByRange -> testIntersectionWithNull [label=" range1", dir=none];
testIsOverlappedByRange -> testFitNull [label=" range1", dir=none];
testIsOverlappedByRange -> testSerializing [label=" range1", dir=none];
testIsOverlappedByRange -> testIsAfterRange [label=" range1", dir=none];
testIsOverlappedByRange -> testContainsRange [label=" range1", dir=none];
testIsOverlappedByRange -> testToString [label=" range1", dir=none];
testIsOverlappedByRange -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsOverlappedByRange -> testIsStartedBy [label=" range1", dir=none];
testIsOverlappedByRange -> setUp [label=" range1", dir=none];
testIsOverlappedByRange -> testToStringFormat [label=" range1", dir=none];
testIsOverlappedByRange -> testGetMinimum [label=" range1", dir=none];
testIsOverlappedByRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsOverlappedByRange -> testEqualsObject [label=" range1", dir=none];
testContainsInt -> testIntersectionWith [label=" range1", dir=none];
testContainsInt -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testContainsInt -> testIsEndedBy [label=" range1", dir=none];
testContainsInt -> testIsBeforeRange [label=" range1", dir=none];
testContainsInt -> testFit [label=" range1", dir=none];
testContainsInt -> testIsAfter [label=" range1", dir=none];
testContainsInt -> testElementCompareTo [label=" range1", dir=none];
testContainsInt -> testHashCode [label=" range1", dir=none];
testContainsInt -> testIntersectionWithNull [label=" range1", dir=none];
testContainsInt -> testFitNull [label=" range1", dir=none];
testContainsInt -> testSerializing [label=" range1", dir=none];
testContainsInt -> testIsAfterRange [label=" range1", dir=none];
testContainsInt -> testContainsRange [label=" range1", dir=none];
testContainsInt -> testToString [label=" range1", dir=none];
testContainsInt -> testIsBeforeIntegerRange [label=" range1", dir=none];
testContainsInt -> testIsStartedBy [label=" range1", dir=none];
testContainsInt -> setUp [label=" rangeFull, range1", dir=none];
testContainsInt -> testToStringFormat [label=" range1", dir=none];
testContainsInt -> testGetMinimum [label=" range1", dir=none];
testContainsInt -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testContainsInt -> testEqualsObject [label=" range1", dir=none];
testFit -> testIsAfterRange [label=" range1", dir=none];
testFit -> testContainsRange [label=" range1", dir=none];
testFit -> testToString [label=" range1", dir=none];
testFit -> testIsBeforeIntegerRange [label=" range1", dir=none];
testFit -> testIsStartedBy [label=" range1", dir=none];
testFit -> testIsAfter [label=" range1", dir=none];
testFit -> testToStringFormat [label=" range1", dir=none];
testFit -> testGetMinimum [label=" range1", dir=none];
testFit -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testFit -> testHashCode [label=" range1", dir=none];
testFit -> testIntersectionWithNull [label=" range1", dir=none];
testFit -> testSerializing [label=" range1", dir=none];
testIsAfter -> testIsAfterRange [label=" range1", dir=none];
testIsAfter -> testContainsRange [label=" range1", dir=none];
testIsAfter -> testToString [label=" range1", dir=none];
testIsAfter -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsAfter -> testIsStartedBy [label=" range1", dir=none];
testIsAfter -> testToStringFormat [label=" range1", dir=none];
testIsAfter -> testGetMinimum [label=" range1", dir=none];
testIsAfter -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsAfter -> testHashCode [label=" range1", dir=none];
testIsAfter -> testIntersectionWithNull [label=" range1", dir=none];
testIsAfter -> testSerializing [label=" range1", dir=none];
testElementCompareTo -> testIntersectionWith [label=" range1", dir=none];
testElementCompareTo -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testElementCompareTo -> testIsEndedBy [label=" range1", dir=none];
testElementCompareTo -> testIsBeforeRange [label=" range1", dir=none];
testElementCompareTo -> testFit [label=" range1", dir=none];
testElementCompareTo -> testIsAfter [label=" range1", dir=none];
testElementCompareTo -> testHashCode [label=" range1", dir=none];
testElementCompareTo -> testIntersectionWithNull [label=" range1", dir=none];
testElementCompareTo -> testFitNull [label=" range1", dir=none];
testElementCompareTo -> testSerializing [label=" range1", dir=none];
testElementCompareTo -> testIsAfterRange [label=" range1", dir=none];
testElementCompareTo -> testContainsRange [label=" range1", dir=none];
testElementCompareTo -> testToString [label=" range1", dir=none];
testElementCompareTo -> testIsBeforeIntegerRange [label=" range1", dir=none];
testElementCompareTo -> testIsStartedBy [label=" range1", dir=none];
testElementCompareTo -> setUp [label=" range1", dir=none];
testElementCompareTo -> testToStringFormat [label=" range1", dir=none];
testElementCompareTo -> testGetMinimum [label=" range1", dir=none];
testElementCompareTo -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testElementCompareTo -> testEqualsObject [label=" range1", dir=none];
testHashCode -> testIsAfterRange [label=" range1", dir=none];
testHashCode -> testContainsRange [label=" range1", dir=none];
testHashCode -> testToString [label=" range1", dir=none];
testHashCode -> testIsBeforeIntegerRange [label=" range1", dir=none];
testHashCode -> testIsStartedBy [label=" range1", dir=none];
testHashCode -> testToStringFormat [label=" range1", dir=none];
testHashCode -> testGetMinimum [label=" range1", dir=none];
testHashCode -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testHashCode -> testIntersectionWithNull [label=" range1", dir=none];
testHashCode -> testSerializing [label=" range1", dir=none];
testIntersectionWithNull -> testIsAfterRange [label=" range1", dir=none];
testIntersectionWithNull -> testContainsRange [label=" range1", dir=none];
testIntersectionWithNull -> testToString [label=" range1", dir=none];
testIntersectionWithNull -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIntersectionWithNull -> testIsStartedBy [label=" range1", dir=none];
testIntersectionWithNull -> testToStringFormat [label=" range1", dir=none];
testIntersectionWithNull -> testGetMinimum [label=" range1", dir=none];
testIntersectionWithNull -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIntersectionWithNull -> testSerializing [label=" range1", dir=none];
testFitNull -> testIntersectionWith [label=" range1", dir=none];
testFitNull -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testFitNull -> testIsEndedBy [label=" range1", dir=none];
testFitNull -> testIsBeforeRange [label=" range1", dir=none];
testFitNull -> testFit [label=" range1", dir=none];
testFitNull -> testIsAfter [label=" range1", dir=none];
testFitNull -> testHashCode [label=" range1", dir=none];
testFitNull -> testIntersectionWithNull [label=" range1", dir=none];
testFitNull -> testSerializing [label=" range1", dir=none];
testFitNull -> testIsAfterRange [label=" range1", dir=none];
testFitNull -> testContainsRange [label=" range1", dir=none];
testFitNull -> testToString [label=" range1", dir=none];
testFitNull -> testIsBeforeIntegerRange [label=" range1", dir=none];
testFitNull -> testIsStartedBy [label=" range1", dir=none];
testFitNull -> setUp [label=" range1", dir=none];
testFitNull -> testToStringFormat [label=" range1", dir=none];
testFitNull -> testGetMinimum [label=" range1", dir=none];
testFitNull -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testFitNull -> testEqualsObject [label=" range1", dir=none];
testSerializing -> testIsAfterRange [label=" range1", dir=none];
testSerializing -> testContainsRange [label=" range1", dir=none];
testSerializing -> testToString [label=" range1", dir=none];
testSerializing -> testIsBeforeIntegerRange [label=" range1", dir=none];
testSerializing -> testIsStartedBy [label=" range1", dir=none];
testSerializing -> testToStringFormat [label=" range1", dir=none];
testSerializing -> testGetMinimum [label=" range1", dir=none];
testSerializing -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsAfterRange -> testContainsRange [label=" range1", dir=none];
testIsAfterRange -> testToString [label=" range1", dir=none];
testIsAfterRange -> testIsBeforeIntegerRange [label=" range1", dir=none];
testIsAfterRange -> testIsStartedBy [label=" range1", dir=none];
testIsAfterRange -> testToStringFormat [label=" range1", dir=none];
testIsAfterRange -> testGetMinimum [label=" range1", dir=none];
testIsAfterRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testContainsRange -> testToString [label=" range1", dir=none];
testContainsRange -> testIsBeforeIntegerRange [label=" range1", dir=none];
testContainsRange -> testIsStartedBy [label=" range1", dir=none];
testContainsRange -> testToStringFormat [label=" range1", dir=none];
testContainsRange -> testGetMinimum [label=" range1", dir=none];
testContainsRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testToString -> testIsBeforeIntegerRange [label=" range1", dir=none];
testToString -> testIsStartedBy [label=" range1", dir=none];
testToString -> testToStringFormat [label=" range1", dir=none];
testToString -> testGetMinimum [label=" range1", dir=none];
testToString -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsBeforeIntegerRange -> testIsStartedBy [label=" range1", dir=none];
testIsBeforeIntegerRange -> testToStringFormat [label=" range1", dir=none];
testIsBeforeIntegerRange -> testGetMinimum [label=" range1", dir=none];
testIsBeforeIntegerRange -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testIsStartedBy -> testToStringFormat [label=" range1", dir=none];
testIsStartedBy -> testGetMinimum [label=" range1", dir=none];
testIsStartedBy -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
setUp -> testIntersectionWith [label=" range1", dir=none];
setUp -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
setUp -> testIsEndedBy [label=" range1", dir=none];
setUp -> testIsBeforeRange [label=" range1", dir=none];
setUp -> testFit [label=" range1", dir=none];
setUp -> testIsAfter [label=" range1", dir=none];
setUp -> testHashCode [label=" range3, range1, range2", dir=none];
setUp -> testIntersectionWithNull [label=" range1", dir=none];
setUp -> testSerializing [label=" range1", dir=none];
setUp -> testIsAfterRange [label=" range1", dir=none];
setUp -> testContainsRange [label=" range1", dir=none];
setUp -> testToString [label=" range1", dir=none];
setUp -> testIsBeforeIntegerRange [label=" range1", dir=none];
setUp -> testIsStartedBy [label=" range1", dir=none];
setUp -> testToStringFormat [label=" range1", dir=none];
setUp -> testGetMinimum [label=" range1", dir=none];
setUp -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
setUp -> testEqualsObject [label=" range3, range1, range2", dir=none];
testToStringFormat -> testGetMinimum [label=" range1", dir=none];
testToStringFormat -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testGetMinimum -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
testEqualsObject -> testIntersectionWith [label=" range1", dir=none];
testEqualsObject -> testIsOverlappedByIntegerRange [label=" range1", dir=none];
testEqualsObject -> testIsEndedBy [label=" range1", dir=none];
testEqualsObject -> testIsBeforeRange [label=" range1", dir=none];
testEqualsObject -> testFit [label=" range1", dir=none];
testEqualsObject -> testIsAfter [label=" range1", dir=none];
testEqualsObject -> testHashCode [label=" range3, range1, range2", dir=none];
testEqualsObject -> testIntersectionWithNull [label=" range1", dir=none];
testEqualsObject -> testSerializing [label=" range1", dir=none];
testEqualsObject -> testIsAfterRange [label=" range1", dir=none];
testEqualsObject -> testContainsRange [label=" range1", dir=none];
testEqualsObject -> testToString [label=" range1", dir=none];
testEqualsObject -> testIsBeforeIntegerRange [label=" range1", dir=none];
testEqualsObject -> testIsStartedBy [label=" range1", dir=none];
testEqualsObject -> testToStringFormat [label=" range1", dir=none];
testEqualsObject -> testGetMinimum [label=" range1", dir=none];
testEqualsObject -> testIntersectionWithNonOverlapping [label=" range1", dir=none];
}