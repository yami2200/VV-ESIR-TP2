digraph G {
testEqualsAndHashCode;
testBadNumberOfBits;
testBadProbability;
testProbability;
testBadNumberOfItems;
testIsSparse;
testEstimateN;
testBadNumberOfHashFunctions;
testFromKM;
testFromNP;
testGetProbability;
testToString;
testFromNM;
testFromNMK;
testFromPMK;
testFromNP -> testGetProbability [label=" shape", dir=none];
testFromNP -> testFromNM [label=" shape", dir=none];
testFromNP -> testFromNMK [label=" shape", dir=none];
testFromNP -> testFromPMK [label=" shape", dir=none];
testGetProbability -> testFromNM [label=" shape", dir=none];
testGetProbability -> testFromNMK [label=" shape", dir=none];
testGetProbability -> testFromPMK [label=" shape", dir=none];
testFromNM -> testFromNMK [label=" shape", dir=none];
testFromNM -> testFromPMK [label=" shape", dir=none];
testProbability -> testFromNP [label=" shape", dir=none];
testProbability -> testGetProbability [label=" shape", dir=none];
testProbability -> testFromNM [label=" shape", dir=none];
testProbability -> testIsSparse [label=" shape", dir=none];
testProbability -> testEstimateN [label=" shape", dir=none];
testProbability -> testFromNMK [label=" shape", dir=none];
testProbability -> testFromPMK [label=" shape", dir=none];
testIsSparse -> testFromNP [label=" shape", dir=none];
testIsSparse -> testGetProbability [label=" shape", dir=none];
testIsSparse -> testFromNM [label=" shape", dir=none];
testIsSparse -> testEstimateN [label=" shape", dir=none];
testIsSparse -> testFromNMK [label=" shape", dir=none];
testIsSparse -> testFromPMK [label=" shape", dir=none];
testEstimateN -> testFromNP [label=" shape", dir=none];
testEstimateN -> testGetProbability [label=" shape", dir=none];
testEstimateN -> testFromNM [label=" shape", dir=none];
testEstimateN -> testFromNMK [label=" shape", dir=none];
testEstimateN -> testFromPMK [label=" shape", dir=none];
testFromNMK -> testFromPMK [label=" shape", dir=none];
}