digraph G {
forEach;
forEachFailure;
frequency;
matchesAll;
frequencyOfNull;
countMatches;
partitionMultiplePredicates;
getFromIterable;
getFromIterableIndexOutOfBoundsException;
partition;
testToString;
size;
forEachButLast;
find;
matchesAny;
firstFromIterable;
setUp;
firstFromIterableIndexOutOfBoundsException;
testToStringWithNullArguments;
indexOf;
containsWithEquator;
testToStringDelimiter;
frequencyOfNull -> countMatches [label=" iterableA, iterableB", dir=none];
frequencyOfNull -> testToString [label=" iterableA", dir=none];
frequencyOfNull -> find [label=" iterableA", dir=none];
frequencyOfNull -> setUp [label=" iterableA, iterableB", dir=none];
frequencyOfNull -> indexOf [label=" iterableA", dir=none];
frequencyOfNull -> testToStringDelimiter [label=" iterableA", dir=none];
countMatches -> partitionMultiplePredicates [label=" EQUALS_TWO", dir=none];
countMatches -> partition [label=" EQUALS_TWO", dir=none];
countMatches -> testToString [label=" iterableA", dir=none];
countMatches -> find [label=" iterableA", dir=none];
countMatches -> matchesAny [label=" EQUALS_TWO", dir=none];
countMatches -> setUp [label=" iterableA, iterableB", dir=none];
countMatches -> indexOf [label=" iterableA", dir=none];
countMatches -> testToStringDelimiter [label=" iterableA", dir=none];
partitionMultiplePredicates -> partition [label=" EQUALS_TWO", dir=none];
partitionMultiplePredicates -> matchesAny [label=" EQUALS_TWO", dir=none];
partition -> matchesAny [label=" EQUALS_TWO", dir=none];
testToString -> find [label=" iterableA", dir=none];
testToString -> setUp [label=" iterableA", dir=none];
testToString -> indexOf [label=" iterableA", dir=none];
testToString -> testToStringDelimiter [label=" iterableA", dir=none];
find -> setUp [label=" iterableA", dir=none];
find -> indexOf [label=" iterableA", dir=none];
find -> testToStringDelimiter [label=" iterableA", dir=none];
setUp -> indexOf [label=" iterableA", dir=none];
setUp -> testToStringDelimiter [label=" iterableA", dir=none];
indexOf -> testToStringDelimiter [label=" iterableA", dir=none];
frequency -> frequencyOfNull [label=" iterableA, iterableB", dir=none];
frequency -> countMatches [label=" iterableA, iterableB", dir=none];
frequency -> testToString [label=" iterableA", dir=none];
frequency -> find [label=" iterableA", dir=none];
frequency -> setUp [label=" iterableA, iterableB", dir=none];
frequency -> indexOf [label=" iterableA", dir=none];
frequency -> matchesAll [label=" iterableA", dir=none];
frequency -> testToStringDelimiter [label=" iterableA", dir=none];
matchesAll -> frequencyOfNull [label=" iterableA", dir=none];
matchesAll -> countMatches [label=" iterableA", dir=none];
matchesAll -> testToString [label=" iterableA", dir=none];
matchesAll -> find [label=" iterableA", dir=none];
matchesAll -> setUp [label=" iterableA, emptyIterable", dir=none];
matchesAll -> indexOf [label=" iterableA", dir=none];
matchesAll -> testToStringDelimiter [label=" iterableA", dir=none];
}