digraph G {
add;
contains;
iterator;
size;
hashCode;
equals;
isEmpty;
clear;
toArray;
getCount;
remove;
add -> contains [label=" map", dir=none];
add -> size [label=" size", dir=none];
add -> hashCode [label=" map", dir=none];
add -> equals [label=" size, map", dir=none];
add -> isEmpty [label=" map", dir=none];
add -> clear [label=" modCount, size, map", dir=none];
add -> toArray [label=" size, map", dir=none];
add -> getCount [label=" map", dir=none];
add -> remove [label=" modCount, size, map", dir=none];
contains -> hashCode [label=" map", dir=none];
contains -> equals [label=" map", dir=none];
contains -> isEmpty [label=" map", dir=none];
contains -> clear [label=" map", dir=none];
contains -> toArray [label=" map", dir=none];
contains -> getCount [label=" map", dir=none];
contains -> remove [label=" map", dir=none];
size -> equals [label=" size", dir=none];
size -> clear [label=" size", dir=none];
size -> toArray [label=" size", dir=none];
size -> remove [label=" size", dir=none];
hashCode -> equals [label=" map", dir=none];
hashCode -> isEmpty [label=" map", dir=none];
hashCode -> clear [label=" map", dir=none];
hashCode -> toArray [label=" map", dir=none];
hashCode -> getCount [label=" map", dir=none];
hashCode -> remove [label=" map", dir=none];
equals -> isEmpty [label=" map", dir=none];
equals -> clear [label=" size, map", dir=none];
equals -> toArray [label=" size, map", dir=none];
equals -> getCount [label=" map", dir=none];
equals -> remove [label=" size, map", dir=none];
isEmpty -> clear [label=" map", dir=none];
isEmpty -> toArray [label=" map", dir=none];
isEmpty -> getCount [label=" map", dir=none];
isEmpty -> remove [label=" map", dir=none];
clear -> toArray [label=" size, map", dir=none];
clear -> getCount [label=" map", dir=none];
clear -> remove [label=" modCount, size, map", dir=none];
toArray -> getCount [label=" map", dir=none];
toArray -> remove [label=" size, map", dir=none];
getCount -> remove [label=" map", dir=none];
}