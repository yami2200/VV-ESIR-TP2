digraph G {
entrySet;
containsKey;
values;
isEmpty;
clear;
containsValue;
put;
remove;
size;
hashCode;
get;
putAll;
equals;
atomic;
keySet;
size -> hashCode [label=" buckets, locks", dir=none];
size -> get [label=" buckets, locks", dir=none];
size -> putAll [label=" buckets, locks", dir=none];
containsKey -> size [label=" buckets, locks", dir=none];
containsKey -> hashCode [label=" buckets, locks", dir=none];
containsKey -> get [label=" buckets, locks", dir=none];
containsKey -> putAll [label=" buckets, locks", dir=none];
containsKey -> isEmpty [label=" buckets, locks", dir=none];
containsKey -> clear [label=" buckets, locks", dir=none];
containsKey -> containsValue [label=" buckets, locks", dir=none];
containsKey -> put [label=" buckets, locks", dir=none];
containsKey -> remove [label=" buckets, locks", dir=none];
hashCode -> get [label=" buckets, locks", dir=none];
hashCode -> putAll [label=" buckets, locks", dir=none];
get -> putAll [label=" buckets, locks", dir=none];
isEmpty -> size [label=" buckets, locks", dir=none];
isEmpty -> hashCode [label=" buckets, locks", dir=none];
isEmpty -> get [label=" buckets, locks", dir=none];
isEmpty -> putAll [label=" buckets, locks", dir=none];
isEmpty -> clear [label=" buckets, locks", dir=none];
isEmpty -> containsValue [label=" buckets, locks", dir=none];
isEmpty -> put [label=" buckets, locks", dir=none];
isEmpty -> remove [label=" buckets, locks", dir=none];
clear -> size [label=" buckets, locks", dir=none];
clear -> hashCode [label=" buckets, locks", dir=none];
clear -> get [label=" buckets, locks", dir=none];
clear -> putAll [label=" buckets, locks", dir=none];
clear -> containsValue [label=" buckets, locks", dir=none];
clear -> put [label=" buckets, locks", dir=none];
clear -> remove [label=" buckets, locks", dir=none];
containsValue -> size [label=" buckets, locks", dir=none];
containsValue -> hashCode [label=" buckets, locks", dir=none];
containsValue -> get [label=" buckets, locks", dir=none];
containsValue -> putAll [label=" buckets, locks", dir=none];
containsValue -> put [label=" buckets, locks", dir=none];
containsValue -> remove [label=" buckets, locks", dir=none];
put -> size [label=" buckets, locks", dir=none];
put -> hashCode [label=" buckets, locks", dir=none];
put -> get [label=" buckets, locks", dir=none];
put -> putAll [label=" buckets, locks", dir=none];
put -> remove [label=" buckets, locks", dir=none];
remove -> size [label=" buckets, locks", dir=none];
remove -> hashCode [label=" buckets, locks", dir=none];
remove -> get [label=" buckets, locks", dir=none];
remove -> putAll [label=" buckets, locks", dir=none];
}