digraph G {
fromNM;
fromNP;
fromKM;
isSparse;
getNumberOfHashFunctions;
fromNMK;
getNumberOfBits;
estimateN;
hashCode;
getProbability;
equals;
fromPMK;
toString;
fromNMK -> getNumberOfBits [label=" numberOfBits", dir=none];
fromNMK -> estimateN [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNMK -> hashCode [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNMK -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNMK -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNMK -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNMK -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> fromNMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> getNumberOfBits [label=" numberOfBits", dir=none];
fromNM -> estimateN [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> fromNP [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> fromKM [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> hashCode [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> isSparse [label=" numberOfBits", dir=none];
fromNM -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNM -> getNumberOfHashFunctions [label=" numberOfHashFunctions", dir=none];
getNumberOfBits -> estimateN [label=" numberOfBits", dir=none];
getNumberOfBits -> hashCode [label=" numberOfBits", dir=none];
getNumberOfBits -> getProbability [label=" numberOfBits", dir=none];
getNumberOfBits -> equals [label=" numberOfBits", dir=none];
getNumberOfBits -> fromPMK [label=" numberOfBits", dir=none];
getNumberOfBits -> toString [label=" numberOfBits", dir=none];
estimateN -> hashCode [label=" numberOfHashFunctions, numberOfBits", dir=none];
estimateN -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
estimateN -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
estimateN -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
estimateN -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> fromNMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> getNumberOfBits [label=" numberOfBits", dir=none];
fromNP -> estimateN [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> fromKM [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> hashCode [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> isSparse [label=" numberOfBits", dir=none];
fromNP -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromNP -> getNumberOfHashFunctions [label=" numberOfHashFunctions", dir=none];
fromKM -> fromNMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> getNumberOfBits [label=" numberOfBits", dir=none];
fromKM -> estimateN [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> hashCode [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> isSparse [label=" numberOfBits", dir=none];
fromKM -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromKM -> getNumberOfHashFunctions [label=" numberOfHashFunctions", dir=none];
hashCode -> getProbability [label=" numberOfHashFunctions, numberOfBits", dir=none];
hashCode -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
hashCode -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
hashCode -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
getProbability -> equals [label=" numberOfHashFunctions, numberOfBits", dir=none];
getProbability -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
getProbability -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
equals -> fromPMK [label=" numberOfHashFunctions, numberOfBits", dir=none];
equals -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
fromPMK -> toString [label=" numberOfHashFunctions, numberOfBits", dir=none];
isSparse -> fromNMK [label=" numberOfBits", dir=none];
isSparse -> getNumberOfBits [label=" numberOfBits", dir=none];
isSparse -> estimateN [label=" numberOfBits", dir=none];
isSparse -> hashCode [label=" numberOfBits", dir=none];
isSparse -> getProbability [label=" numberOfBits", dir=none];
isSparse -> equals [label=" numberOfBits", dir=none];
isSparse -> fromPMK [label=" numberOfBits", dir=none];
isSparse -> toString [label=" numberOfBits", dir=none];
getNumberOfHashFunctions -> fromNMK [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> estimateN [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> hashCode [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> getProbability [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> equals [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> fromPMK [label=" numberOfHashFunctions", dir=none];
getNumberOfHashFunctions -> toString [label=" numberOfHashFunctions", dir=none];
}