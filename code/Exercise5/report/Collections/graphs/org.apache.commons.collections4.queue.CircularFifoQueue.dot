digraph G {
add;
isEmpty;
clear;
maxSize;
poll;
remove;
peek;
isAtFullCapacity;
offer;
iterator;
size;
get;
isFull;
element;
add -> isAtFullCapacity [label=" maxElements, start, end, full", dir=none];
add -> offer [label=" elements, maxElements, start, end, full", dir=none];
add -> iterator [label=" elements, maxElements, start, end, full", dir=none];
add -> size [label=" maxElements, start, end, full", dir=none];
add -> get [label=" elements, maxElements, start, end, full", dir=none];
add -> isEmpty [label=" maxElements, start, end, full", dir=none];
add -> clear [label=" elements, start, end, full", dir=none];
add -> maxSize [label=" maxElements", dir=none];
add -> poll [label=" elements, maxElements, start, end, full", dir=none];
add -> remove [label=" elements, maxElements, start, end, full", dir=none];
add -> peek [label=" elements, maxElements, start, end, full", dir=none];
add -> element [label=" elements, maxElements, start, end, full", dir=none];
isAtFullCapacity -> offer [label=" maxElements, start, end, full", dir=none];
isAtFullCapacity -> iterator [label=" maxElements, start, end, full", dir=none];
isAtFullCapacity -> size [label=" maxElements, start, end, full", dir=none];
isAtFullCapacity -> get [label=" maxElements, start, end, full", dir=none];
isAtFullCapacity -> element [label=" maxElements, start, end, full", dir=none];
offer -> iterator [label=" elements, maxElements, start, end, full", dir=none];
offer -> size [label=" maxElements, start, end, full", dir=none];
offer -> get [label=" elements, maxElements, start, end, full", dir=none];
offer -> element [label=" elements, maxElements, start, end, full", dir=none];
iterator -> size [label=" start, maxElements, end, full", dir=none];
iterator -> get [label=" elements, start, maxElements, end, full", dir=none];
iterator -> element [label=" elements, start, maxElements, end, full", dir=none];
size -> get [label=" start, maxElements, end, full", dir=none];
size -> element [label=" start, maxElements, end, full", dir=none];
get -> element [label=" elements, start, maxElements, end, full", dir=none];
isEmpty -> isAtFullCapacity [label=" start, maxElements, end, full", dir=none];
isEmpty -> offer [label=" start, maxElements, end, full", dir=none];
isEmpty -> iterator [label=" start, maxElements, end, full", dir=none];
isEmpty -> size [label=" start, maxElements, end, full", dir=none];
isEmpty -> get [label=" start, maxElements, end, full", dir=none];
isEmpty -> clear [label=" start, end, full", dir=none];
isEmpty -> maxSize [label=" maxElements", dir=none];
isEmpty -> poll [label=" start, maxElements, end, full", dir=none];
isEmpty -> remove [label=" start, maxElements, end, full", dir=none];
isEmpty -> peek [label=" start, maxElements, end, full", dir=none];
isEmpty -> element [label=" start, maxElements, end, full", dir=none];
clear -> isAtFullCapacity [label=" start, end, full", dir=none];
clear -> offer [label=" elements, start, end, full", dir=none];
clear -> iterator [label=" elements, start, end, full", dir=none];
clear -> size [label=" start, end, full", dir=none];
clear -> get [label=" elements, start, end, full", dir=none];
clear -> poll [label=" elements, start, end, full", dir=none];
clear -> remove [label=" elements, start, end, full", dir=none];
clear -> peek [label=" elements, start, end, full", dir=none];
clear -> element [label=" elements, start, end, full", dir=none];
maxSize -> isAtFullCapacity [label=" maxElements", dir=none];
maxSize -> offer [label=" maxElements", dir=none];
maxSize -> iterator [label=" maxElements", dir=none];
maxSize -> size [label=" maxElements", dir=none];
maxSize -> get [label=" maxElements", dir=none];
maxSize -> poll [label=" maxElements", dir=none];
maxSize -> remove [label=" maxElements", dir=none];
maxSize -> peek [label=" maxElements", dir=none];
maxSize -> element [label=" maxElements", dir=none];
poll -> isAtFullCapacity [label=" start, maxElements, end, full", dir=none];
poll -> offer [label=" elements, start, maxElements, end, full", dir=none];
poll -> iterator [label=" elements, start, maxElements, end, full", dir=none];
poll -> size [label=" start, maxElements, end, full", dir=none];
poll -> get [label=" elements, start, maxElements, end, full", dir=none];
poll -> remove [label=" elements, start, maxElements, end, full", dir=none];
poll -> peek [label=" elements, start, maxElements, end, full", dir=none];
poll -> element [label=" elements, start, maxElements, end, full", dir=none];
remove -> isAtFullCapacity [label=" start, maxElements, end, full", dir=none];
remove -> offer [label=" elements, start, maxElements, end, full", dir=none];
remove -> iterator [label=" elements, start, maxElements, end, full", dir=none];
remove -> size [label=" start, maxElements, end, full", dir=none];
remove -> get [label=" elements, start, maxElements, end, full", dir=none];
remove -> peek [label=" elements, start, maxElements, end, full", dir=none];
remove -> element [label=" elements, start, maxElements, end, full", dir=none];
peek -> isAtFullCapacity [label=" start, maxElements, end, full", dir=none];
peek -> offer [label=" elements, start, maxElements, end, full", dir=none];
peek -> iterator [label=" elements, start, maxElements, end, full", dir=none];
peek -> size [label=" start, maxElements, end, full", dir=none];
peek -> get [label=" elements, start, maxElements, end, full", dir=none];
peek -> element [label=" elements, start, maxElements, end, full", dir=none];
}