digraph G {
add;
containsAll;
isEmpty;
clear;
remove;
contains;
iterator;
removeAll;
size;
addAll;
hashCode;
equals;
toArray;
uniqueSet;
toString;
getCount;
retainAll;
add -> isEmpty [label=" map", dir=none];
add -> clear [label=" modCount, size, map", dir=none];
add -> remove [label=" modCount, size, map", dir=none];
add -> contains [label=" map", dir=none];
add -> removeAll [label=" modCount, size, map", dir=none];
add -> size [label=" size", dir=none];
add -> addAll [label=" modCount, size, map", dir=none];
add -> hashCode [label=" map", dir=none];
add -> equals [label=" size, map", dir=none];
add -> toArray [label=" size, map", dir=none];
add -> uniqueSet [label=" map", dir=none];
add -> toString [label=" map", dir=none];
add -> getCount [label=" map", dir=none];
isEmpty -> contains [label=" map", dir=none];
isEmpty -> removeAll [label=" map", dir=none];
isEmpty -> addAll [label=" map", dir=none];
isEmpty -> hashCode [label=" map", dir=none];
isEmpty -> equals [label=" map", dir=none];
isEmpty -> clear [label=" map", dir=none];
isEmpty -> toArray [label=" map", dir=none];
isEmpty -> uniqueSet [label=" map", dir=none];
isEmpty -> toString [label=" map", dir=none];
isEmpty -> getCount [label=" map", dir=none];
isEmpty -> remove [label=" map", dir=none];
clear -> contains [label=" map", dir=none];
clear -> removeAll [label=" modCount, size, map", dir=none];
clear -> size [label=" size", dir=none];
clear -> addAll [label=" modCount, size, map", dir=none];
clear -> hashCode [label=" map", dir=none];
clear -> equals [label=" size, map", dir=none];
clear -> toArray [label=" size, map", dir=none];
clear -> uniqueSet [label=" map", dir=none];
clear -> toString [label=" map", dir=none];
clear -> getCount [label=" map", dir=none];
clear -> remove [label=" modCount, size, map", dir=none];
remove -> contains [label=" map", dir=none];
remove -> removeAll [label=" modCount, size, map", dir=none];
remove -> size [label=" size", dir=none];
remove -> addAll [label=" modCount, size, map", dir=none];
remove -> hashCode [label=" map", dir=none];
remove -> equals [label=" size, map", dir=none];
remove -> toArray [label=" size, map", dir=none];
remove -> uniqueSet [label=" map", dir=none];
remove -> toString [label=" map", dir=none];
remove -> getCount [label=" map", dir=none];
contains -> removeAll [label=" map", dir=none];
contains -> addAll [label=" map", dir=none];
contains -> hashCode [label=" map", dir=none];
contains -> equals [label=" map", dir=none];
contains -> toArray [label=" map", dir=none];
contains -> uniqueSet [label=" map", dir=none];
contains -> toString [label=" map", dir=none];
contains -> getCount [label=" map", dir=none];
removeAll -> size [label=" size", dir=none];
removeAll -> addAll [label=" modCount, size, map", dir=none];
removeAll -> hashCode [label=" map", dir=none];
removeAll -> equals [label=" size, map", dir=none];
removeAll -> toArray [label=" size, map", dir=none];
removeAll -> uniqueSet [label=" map", dir=none];
removeAll -> toString [label=" map", dir=none];
removeAll -> getCount [label=" map", dir=none];
size -> addAll [label=" size", dir=none];
size -> equals [label=" size", dir=none];
size -> toArray [label=" size", dir=none];
addAll -> hashCode [label=" map", dir=none];
addAll -> equals [label=" size, map", dir=none];
addAll -> toArray [label=" size, map", dir=none];
addAll -> uniqueSet [label=" map", dir=none];
addAll -> toString [label=" map", dir=none];
addAll -> getCount [label=" map", dir=none];
hashCode -> equals [label=" map", dir=none];
hashCode -> toArray [label=" map", dir=none];
hashCode -> uniqueSet [label=" map", dir=none];
hashCode -> toString [label=" map", dir=none];
hashCode -> getCount [label=" map", dir=none];
equals -> toArray [label=" size, map", dir=none];
equals -> uniqueSet [label=" map", dir=none];
equals -> toString [label=" map", dir=none];
equals -> getCount [label=" map", dir=none];
toArray -> uniqueSet [label=" map", dir=none];
toArray -> toString [label=" map", dir=none];
toArray -> getCount [label=" map", dir=none];
uniqueSet -> toString [label=" uniqueSet, map", dir=none];
uniqueSet -> getCount [label=" map", dir=none];
toString -> getCount [label=" map", dir=none];
}