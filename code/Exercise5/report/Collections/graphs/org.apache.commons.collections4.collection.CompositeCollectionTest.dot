digraph G {
testClear;
makeObject;
testRemove;
testContainsAll;
testAddNullLists2Args;
makeConfirmedCollection;
testAddAllToCollection;
testToCollection;
testMultipleCollectionsSize;
testRemoveAll;
testIsEmpty;
testSize;
testUnsupportedRemove;
testAddMutator;
testAddAllMutator;
testAddNullListsVarArgs;
testRetainAll;
makeFullCollection;
getCompatibilityVersion;
getFullElements;
testAddNullList;
isAddSupported;
testIterator;
testRemoveComposited;
testRemoveIf;
isRemoveSupported;
makeConfirmedFullCollection;
testClear -> testRetainAll [label=" c, one, two", dir=none];
testClear -> testRemove [label=" c, one, two", dir=none];
testClear -> testContainsAll [label=" c, one, two", dir=none];
testClear -> testAddAllToCollection [label=" c, one, two", dir=none];
testClear -> testToCollection [label=" c, one, two", dir=none];
testClear -> testIterator [label=" c, one, two", dir=none];
testClear -> testRemoveComposited [label=" c, one, two", dir=none];
testClear -> testMultipleCollectionsSize [label=" c", dir=none];
testClear -> testRemoveIf [label=" c, one, two", dir=none];
testClear -> testRemoveAll [label=" c, one, two", dir=none];
testClear -> testIsEmpty [label=" c", dir=none];
testClear -> testSize [label=" c", dir=none];
testClear -> testAddMutator [label=" c, one", dir=none];
testClear -> testAddAllMutator [label=" c, one, two", dir=none];
testRetainAll -> testRemoveComposited [label=" c, one, two", dir=none];
testRetainAll -> testRemoveIf [label=" c, one, two", dir=none];
testRetainAll -> testIterator [label=" c, one, two", dir=none];
testRemove -> testRetainAll [label=" c, one, two", dir=none];
testRemove -> testContainsAll [label=" c, one, two", dir=none];
testRemove -> testAddAllToCollection [label=" c, one, two", dir=none];
testRemove -> testToCollection [label=" c, one, two", dir=none];
testRemove -> testIterator [label=" c, one, two", dir=none];
testRemove -> testRemoveComposited [label=" c, one, two", dir=none];
testRemove -> testMultipleCollectionsSize [label=" c", dir=none];
testRemove -> testRemoveIf [label=" c, one, two", dir=none];
testRemove -> testRemoveAll [label=" c, one, two", dir=none];
testRemove -> testIsEmpty [label=" c", dir=none];
testRemove -> testSize [label=" c", dir=none];
testRemove -> testAddMutator [label=" c, one", dir=none];
testRemove -> testAddAllMutator [label=" c, one, two", dir=none];
testContainsAll -> testRemoveComposited [label=" c, one, two", dir=none];
testContainsAll -> testMultipleCollectionsSize [label=" c", dir=none];
testContainsAll -> testRemoveIf [label=" c, one, two", dir=none];
testContainsAll -> testRemoveAll [label=" c, one, two", dir=none];
testContainsAll -> testRetainAll [label=" c, one, two", dir=none];
testContainsAll -> testIsEmpty [label=" c", dir=none];
testContainsAll -> testSize [label=" c", dir=none];
testContainsAll -> testAddAllToCollection [label=" c, one, two", dir=none];
testContainsAll -> testToCollection [label=" c, one, two", dir=none];
testContainsAll -> testAddMutator [label=" c, one", dir=none];
testContainsAll -> testAddAllMutator [label=" c, one, two", dir=none];
testContainsAll -> testIterator [label=" c, one, two", dir=none];
testAddAllToCollection -> testRemoveComposited [label=" c, one, two", dir=none];
testAddAllToCollection -> testMultipleCollectionsSize [label=" c", dir=none];
testAddAllToCollection -> testRemoveIf [label=" c, one, two", dir=none];
testAddAllToCollection -> testRemoveAll [label=" c, one, two", dir=none];
testAddAllToCollection -> testRetainAll [label=" c, one, two", dir=none];
testAddAllToCollection -> testIsEmpty [label=" c", dir=none];
testAddAllToCollection -> testSize [label=" c", dir=none];
testAddAllToCollection -> testToCollection [label=" c, one, two", dir=none];
testAddAllToCollection -> testAddMutator [label=" c, one", dir=none];
testAddAllToCollection -> testAddAllMutator [label=" c, one, two", dir=none];
testAddAllToCollection -> testIterator [label=" c, one, two", dir=none];
testToCollection -> testRemoveComposited [label=" c, one, two", dir=none];
testToCollection -> testMultipleCollectionsSize [label=" c", dir=none];
testToCollection -> testRemoveIf [label=" c, one, two", dir=none];
testToCollection -> testRemoveAll [label=" c, one, two", dir=none];
testToCollection -> testRetainAll [label=" c, one, two", dir=none];
testToCollection -> testIsEmpty [label=" c", dir=none];
testToCollection -> testSize [label=" c", dir=none];
testToCollection -> testAddMutator [label=" c, one", dir=none];
testToCollection -> testAddAllMutator [label=" c, one, two", dir=none];
testToCollection -> testIterator [label=" c, one, two", dir=none];
testIterator -> testRemoveComposited [label=" c, one, two", dir=none];
testIterator -> testRemoveIf [label=" c, one, two", dir=none];
testRemoveComposited -> testRemoveIf [label=" c, one, two", dir=none];
testMultipleCollectionsSize -> testRemoveComposited [label=" c", dir=none];
testMultipleCollectionsSize -> testRemoveIf [label=" c", dir=none];
testMultipleCollectionsSize -> testRemoveAll [label=" c", dir=none];
testMultipleCollectionsSize -> testRetainAll [label=" c", dir=none];
testMultipleCollectionsSize -> testIsEmpty [label=" c", dir=none];
testMultipleCollectionsSize -> testSize [label=" c", dir=none];
testMultipleCollectionsSize -> testAddMutator [label=" c", dir=none];
testMultipleCollectionsSize -> testAddAllMutator [label=" c", dir=none];
testMultipleCollectionsSize -> testIterator [label=" c", dir=none];
testRemoveAll -> testRemoveComposited [label=" c, one, two", dir=none];
testRemoveAll -> testRemoveIf [label=" c, one, two", dir=none];
testRemoveAll -> testRetainAll [label=" c, one, two", dir=none];
testRemoveAll -> testIsEmpty [label=" c", dir=none];
testRemoveAll -> testSize [label=" c", dir=none];
testRemoveAll -> testAddMutator [label=" c, one", dir=none];
testRemoveAll -> testAddAllMutator [label=" c, one, two", dir=none];
testRemoveAll -> testIterator [label=" c, one, two", dir=none];
testIsEmpty -> testRemoveComposited [label=" c", dir=none];
testIsEmpty -> testRemoveIf [label=" c", dir=none];
testIsEmpty -> testRetainAll [label=" c", dir=none];
testIsEmpty -> testSize [label=" c", dir=none];
testIsEmpty -> testAddMutator [label=" c", dir=none];
testIsEmpty -> testAddAllMutator [label=" c", dir=none];
testIsEmpty -> testIterator [label=" c", dir=none];
testSize -> testRemoveComposited [label=" c", dir=none];
testSize -> testRemoveIf [label=" c", dir=none];
testSize -> testRetainAll [label=" c", dir=none];
testSize -> testAddMutator [label=" c", dir=none];
testSize -> testAddAllMutator [label=" c", dir=none];
testSize -> testIterator [label=" c", dir=none];
testAddMutator -> testRemoveComposited [label=" c, one", dir=none];
testAddMutator -> testRemoveIf [label=" c, one", dir=none];
testAddMutator -> testRetainAll [label=" c, one", dir=none];
testAddMutator -> testAddAllMutator [label=" c, one", dir=none];
testAddMutator -> testIterator [label=" c, one", dir=none];
testAddAllMutator -> testRemoveComposited [label=" c, one, two", dir=none];
testAddAllMutator -> testRemoveIf [label=" c, one, two", dir=none];
testAddAllMutator -> testRetainAll [label=" c, one, two", dir=none];
testAddAllMutator -> testIterator [label=" c, one, two", dir=none];
}