digraph G {
entrySet;
containsKey;
values;
isEmpty;
clear;
containsValue;
put;
remove;
mapIterator;
size;
hashCode;
get;
putAll;
equals;
toString;
keySet;
mapIterator -> size [label=" size", dir=none];
mapIterator -> equals [label=" size", dir=none];
mapIterator -> toString [label=" size", dir=none];
size -> equals [label=" size", dir=none];
size -> toString [label=" size", dir=none];
containsKey -> get [label=" data", dir=none];
containsKey -> equals [label=" data", dir=none];
containsKey -> clear [label=" data", dir=none];
containsKey -> containsValue [label=" data", dir=none];
containsKey -> put [label=" data", dir=none];
containsKey -> remove [label=" data", dir=none];
get -> equals [label=" data", dir=none];
equals -> toString [label=" size", dir=none];
isEmpty -> mapIterator [label=" size", dir=none];
isEmpty -> size [label=" size", dir=none];
isEmpty -> equals [label=" size", dir=none];
isEmpty -> clear [label=" size", dir=none];
isEmpty -> toString [label=" size", dir=none];
clear -> mapIterator [label=" size", dir=none];
clear -> size [label=" size", dir=none];
clear -> get [label=" data", dir=none];
clear -> equals [label=" data, size", dir=none];
clear -> toString [label=" size", dir=none];
clear -> containsValue [label=" data", dir=none];
clear -> put [label=" data", dir=none];
clear -> remove [label=" data", dir=none];
containsValue -> get [label=" data", dir=none];
containsValue -> equals [label=" data", dir=none];
containsValue -> put [label=" data", dir=none];
containsValue -> remove [label=" data", dir=none];
put -> get [label=" data", dir=none];
put -> equals [label=" data", dir=none];
put -> remove [label=" data", dir=none];
remove -> get [label=" data", dir=none];
remove -> equals [label=" data", dir=none];
}