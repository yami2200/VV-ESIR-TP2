digraph G {
values;
maxSize;
containsValue;
put;
remove;
mapIterator;
hashCode;
get;
putAll;
lastKey;
keySet;
getKey;
previousKey;
entrySet;
containsKey;
isEmpty;
clear;
getValue;
size;
firstKey;
setValue;
equals;
clone;
toString;
isFull;
nextKey;
getKey -> entrySet [label=" key", dir=none];
getKey -> containsKey [label=" key", dir=none];
getKey -> firstKey [label=" key", dir=none];
getKey -> equals [label=" key", dir=none];
getKey -> toString [label=" key", dir=none];
entrySet -> containsKey [label=" key", dir=none];
entrySet -> firstKey [label=" key", dir=none];
entrySet -> equals [label=" key", dir=none];
entrySet -> toString [label=" key", dir=none];
containsKey -> firstKey [label=" key", dir=none];
containsKey -> equals [label=" key", dir=none];
containsKey -> toString [label=" key", dir=none];
containsValue -> getValue [label=" value", dir=none];
containsValue -> hashCode [label=" value", dir=none];
containsValue -> get [label=" value", dir=none];
containsValue -> putAll [label=" value", dir=none];
containsValue -> setValue [label=" value", dir=none];
containsValue -> equals [label=" value", dir=none];
containsValue -> toString [label=" value", dir=none];
containsValue -> put [label=" value", dir=none];
put -> getKey [label=" key", dir=none];
put -> entrySet [label=" key", dir=none];
put -> containsKey [label=" key", dir=none];
put -> getValue [label=" value", dir=none];
put -> hashCode [label=" value, key", dir=none];
put -> firstKey [label=" key", dir=none];
put -> get [label=" value, key", dir=none];
put -> putAll [label=" value, key", dir=none];
put -> setValue [label=" value", dir=none];
put -> equals [label=" value, key", dir=none];
put -> lastKey [label=" key", dir=none];
put -> toString [label=" value, key", dir=none];
put -> keySet [label=" key", dir=none];
getValue -> setValue [label=" value", dir=none];
getValue -> equals [label=" value", dir=none];
getValue -> toString [label=" value", dir=none];
hashCode -> getKey [label=" key", dir=none];
hashCode -> getValue [label=" value", dir=none];
hashCode -> entrySet [label=" key", dir=none];
hashCode -> containsKey [label=" key", dir=none];
hashCode -> firstKey [label=" key", dir=none];
hashCode -> get [label=" value, key", dir=none];
hashCode -> putAll [label=" value, key", dir=none];
hashCode -> setValue [label=" value", dir=none];
hashCode -> equals [label=" value, key", dir=none];
hashCode -> lastKey [label=" key", dir=none];
hashCode -> toString [label=" value, key", dir=none];
hashCode -> keySet [label=" key", dir=none];
firstKey -> equals [label=" key", dir=none];
firstKey -> toString [label=" key", dir=none];
get -> getKey [label=" key", dir=none];
get -> getValue [label=" value", dir=none];
get -> entrySet [label=" key", dir=none];
get -> containsKey [label=" key", dir=none];
get -> firstKey [label=" key", dir=none];
get -> putAll [label=" value, key", dir=none];
get -> setValue [label=" value", dir=none];
get -> equals [label=" value, key", dir=none];
get -> lastKey [label=" key", dir=none];
get -> toString [label=" value, key", dir=none];
get -> keySet [label=" key", dir=none];
putAll -> getKey [label=" key", dir=none];
putAll -> getValue [label=" value", dir=none];
putAll -> entrySet [label=" key", dir=none];
putAll -> containsKey [label=" key", dir=none];
putAll -> firstKey [label=" key", dir=none];
putAll -> setValue [label=" value", dir=none];
putAll -> equals [label=" value, key", dir=none];
putAll -> lastKey [label=" key", dir=none];
putAll -> toString [label=" value, key", dir=none];
putAll -> keySet [label=" key", dir=none];
setValue -> equals [label=" value", dir=none];
setValue -> toString [label=" value", dir=none];
equals -> toString [label=" value, key", dir=none];
lastKey -> getKey [label=" key", dir=none];
lastKey -> entrySet [label=" key", dir=none];
lastKey -> containsKey [label=" key", dir=none];
lastKey -> firstKey [label=" key", dir=none];
lastKey -> equals [label=" key", dir=none];
lastKey -> toString [label=" key", dir=none];
lastKey -> keySet [label=" key", dir=none];
keySet -> getKey [label=" key", dir=none];
keySet -> entrySet [label=" key", dir=none];
keySet -> containsKey [label=" key", dir=none];
keySet -> firstKey [label=" key", dir=none];
keySet -> equals [label=" key", dir=none];
keySet -> toString [label=" key", dir=none];
}