digraph G {
add;
getSets;
containsAll;
isEmpty;
clear;
remove;
removeComposited;
removeIf;
addComposited;
toSet;
contains;
iterator;
removeAll;
size;
addAll;
hashCode;
equals;
toArray;
setMutator;
retainAll;
add -> getSets [label=" all", dir=none];
add -> containsAll [label=" all", dir=none];
add -> isEmpty [label=" all", dir=none];
add -> clear [label=" all", dir=none];
add -> remove [label=" all", dir=none];
add -> removeComposited [label=" all", dir=none];
add -> removeIf [label=" all", dir=none];
add -> contains [label=" all", dir=none];
add -> iterator [label=" all", dir=none];
add -> removeAll [label=" all", dir=none];
add -> size [label=" all", dir=none];
add -> addAll [label=" all, mutator", dir=none];
add -> equals [label=" all", dir=none];
add -> toArray [label=" all", dir=none];
add -> setMutator [label=" mutator", dir=none];
add -> retainAll [label=" all", dir=none];
getSets -> containsAll [label=" all", dir=none];
getSets -> isEmpty [label=" all", dir=none];
getSets -> clear [label=" all", dir=none];
getSets -> remove [label=" all", dir=none];
getSets -> removeComposited [label=" all", dir=none];
getSets -> removeIf [label=" all", dir=none];
getSets -> contains [label=" all", dir=none];
getSets -> iterator [label=" all", dir=none];
getSets -> removeAll [label=" all", dir=none];
getSets -> size [label=" all", dir=none];
getSets -> addAll [label=" all", dir=none];
getSets -> equals [label=" all", dir=none];
getSets -> toArray [label=" all", dir=none];
getSets -> retainAll [label=" all", dir=none];
containsAll -> isEmpty [label=" all", dir=none];
containsAll -> clear [label=" all", dir=none];
containsAll -> remove [label=" all", dir=none];
containsAll -> removeComposited [label=" all", dir=none];
containsAll -> removeIf [label=" all", dir=none];
containsAll -> contains [label=" all", dir=none];
containsAll -> iterator [label=" all", dir=none];
containsAll -> removeAll [label=" all", dir=none];
containsAll -> size [label=" all", dir=none];
containsAll -> addAll [label=" all", dir=none];
containsAll -> equals [label=" all", dir=none];
containsAll -> toArray [label=" all", dir=none];
containsAll -> retainAll [label=" all", dir=none];
isEmpty -> contains [label=" all", dir=none];
isEmpty -> iterator [label=" all", dir=none];
isEmpty -> removeAll [label=" all", dir=none];
isEmpty -> size [label=" all", dir=none];
isEmpty -> addAll [label=" all", dir=none];
isEmpty -> equals [label=" all", dir=none];
isEmpty -> clear [label=" all", dir=none];
isEmpty -> toArray [label=" all", dir=none];
isEmpty -> remove [label=" all", dir=none];
isEmpty -> removeComposited [label=" all", dir=none];
isEmpty -> removeIf [label=" all", dir=none];
isEmpty -> retainAll [label=" all", dir=none];
clear -> contains [label=" all", dir=none];
clear -> iterator [label=" all", dir=none];
clear -> removeAll [label=" all", dir=none];
clear -> size [label=" all", dir=none];
clear -> addAll [label=" all", dir=none];
clear -> equals [label=" all", dir=none];
clear -> toArray [label=" all", dir=none];
clear -> remove [label=" all", dir=none];
clear -> removeComposited [label=" all", dir=none];
clear -> removeIf [label=" all", dir=none];
clear -> retainAll [label=" all", dir=none];
remove -> contains [label=" all", dir=none];
remove -> iterator [label=" all", dir=none];
remove -> removeAll [label=" all", dir=none];
remove -> size [label=" all", dir=none];
remove -> addAll [label=" all", dir=none];
remove -> equals [label=" all", dir=none];
remove -> toArray [label=" all", dir=none];
remove -> removeComposited [label=" all", dir=none];
remove -> removeIf [label=" all", dir=none];
remove -> retainAll [label=" all", dir=none];
removeComposited -> contains [label=" all", dir=none];
removeComposited -> iterator [label=" all", dir=none];
removeComposited -> removeAll [label=" all", dir=none];
removeComposited -> size [label=" all", dir=none];
removeComposited -> addAll [label=" all", dir=none];
removeComposited -> equals [label=" all", dir=none];
removeComposited -> toArray [label=" all", dir=none];
removeComposited -> removeIf [label=" all", dir=none];
removeComposited -> retainAll [label=" all", dir=none];
removeIf -> contains [label=" all", dir=none];
removeIf -> iterator [label=" all", dir=none];
removeIf -> removeAll [label=" all", dir=none];
removeIf -> size [label=" all", dir=none];
removeIf -> addAll [label=" all", dir=none];
removeIf -> equals [label=" all", dir=none];
removeIf -> toArray [label=" all", dir=none];
removeIf -> retainAll [label=" all", dir=none];
contains -> iterator [label=" all", dir=none];
contains -> removeAll [label=" all", dir=none];
contains -> size [label=" all", dir=none];
contains -> addAll [label=" all", dir=none];
contains -> equals [label=" all", dir=none];
contains -> toArray [label=" all", dir=none];
contains -> retainAll [label=" all", dir=none];
iterator -> removeAll [label=" all", dir=none];
iterator -> size [label=" all", dir=none];
iterator -> addAll [label=" all", dir=none];
iterator -> equals [label=" all", dir=none];
iterator -> toArray [label=" all", dir=none];
iterator -> retainAll [label=" all", dir=none];
removeAll -> size [label=" all", dir=none];
removeAll -> addAll [label=" all", dir=none];
removeAll -> equals [label=" all", dir=none];
removeAll -> toArray [label=" all", dir=none];
removeAll -> retainAll [label=" all", dir=none];
size -> addAll [label=" all", dir=none];
size -> equals [label=" all", dir=none];
size -> toArray [label=" all", dir=none];
size -> retainAll [label=" all", dir=none];
addAll -> equals [label=" all", dir=none];
addAll -> toArray [label=" all", dir=none];
addAll -> setMutator [label=" mutator", dir=none];
addAll -> retainAll [label=" all", dir=none];
equals -> toArray [label=" all", dir=none];
equals -> retainAll [label=" all", dir=none];
toArray -> retainAll [label=" all", dir=none];
}