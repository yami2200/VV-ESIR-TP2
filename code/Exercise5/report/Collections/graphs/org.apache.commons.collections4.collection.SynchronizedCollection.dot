digraph G {
add;
containsAll;
clear;
isEmpty;
synchronizedCollection;
remove;
removeIf;
contains;
iterator;
removeAll;
size;
addAll;
hashCode;
equals;
toArray;
toString;
retainAll;
add -> containsAll [label=" lock", dir=none];
add -> clear [label=" lock", dir=none];
add -> isEmpty [label=" lock", dir=none];
add -> remove [label=" lock", dir=none];
add -> removeIf [label=" lock", dir=none];
add -> contains [label=" lock", dir=none];
add -> removeAll [label=" lock", dir=none];
add -> size [label=" lock", dir=none];
add -> addAll [label=" lock", dir=none];
add -> hashCode [label=" lock", dir=none];
add -> equals [label=" lock", dir=none];
add -> toArray [label=" lock", dir=none];
add -> toString [label=" lock", dir=none];
add -> retainAll [label=" lock", dir=none];
containsAll -> clear [label=" lock", dir=none];
containsAll -> isEmpty [label=" lock", dir=none];
containsAll -> remove [label=" lock", dir=none];
containsAll -> removeIf [label=" lock", dir=none];
containsAll -> contains [label=" lock", dir=none];
containsAll -> removeAll [label=" lock", dir=none];
containsAll -> size [label=" lock", dir=none];
containsAll -> addAll [label=" lock", dir=none];
containsAll -> hashCode [label=" lock", dir=none];
containsAll -> equals [label=" lock", dir=none];
containsAll -> toArray [label=" lock", dir=none];
containsAll -> toString [label=" lock", dir=none];
containsAll -> retainAll [label=" lock", dir=none];
clear -> contains [label=" lock", dir=none];
clear -> removeAll [label=" lock", dir=none];
clear -> size [label=" lock", dir=none];
clear -> addAll [label=" lock", dir=none];
clear -> hashCode [label=" lock", dir=none];
clear -> equals [label=" lock", dir=none];
clear -> isEmpty [label=" lock", dir=none];
clear -> toArray [label=" lock", dir=none];
clear -> toString [label=" lock", dir=none];
clear -> remove [label=" lock", dir=none];
clear -> removeIf [label=" lock", dir=none];
clear -> retainAll [label=" lock", dir=none];
isEmpty -> contains [label=" lock", dir=none];
isEmpty -> removeAll [label=" lock", dir=none];
isEmpty -> size [label=" lock", dir=none];
isEmpty -> addAll [label=" lock", dir=none];
isEmpty -> hashCode [label=" lock", dir=none];
isEmpty -> equals [label=" lock", dir=none];
isEmpty -> toArray [label=" lock", dir=none];
isEmpty -> toString [label=" lock", dir=none];
isEmpty -> remove [label=" lock", dir=none];
isEmpty -> removeIf [label=" lock", dir=none];
isEmpty -> retainAll [label=" lock", dir=none];
remove -> contains [label=" lock", dir=none];
remove -> removeAll [label=" lock", dir=none];
remove -> size [label=" lock", dir=none];
remove -> addAll [label=" lock", dir=none];
remove -> hashCode [label=" lock", dir=none];
remove -> equals [label=" lock", dir=none];
remove -> toArray [label=" lock", dir=none];
remove -> toString [label=" lock", dir=none];
remove -> removeIf [label=" lock", dir=none];
remove -> retainAll [label=" lock", dir=none];
removeIf -> contains [label=" lock", dir=none];
removeIf -> removeAll [label=" lock", dir=none];
removeIf -> size [label=" lock", dir=none];
removeIf -> addAll [label=" lock", dir=none];
removeIf -> hashCode [label=" lock", dir=none];
removeIf -> equals [label=" lock", dir=none];
removeIf -> toArray [label=" lock", dir=none];
removeIf -> toString [label=" lock", dir=none];
removeIf -> retainAll [label=" lock", dir=none];
contains -> removeAll [label=" lock", dir=none];
contains -> size [label=" lock", dir=none];
contains -> addAll [label=" lock", dir=none];
contains -> hashCode [label=" lock", dir=none];
contains -> equals [label=" lock", dir=none];
contains -> toArray [label=" lock", dir=none];
contains -> toString [label=" lock", dir=none];
contains -> retainAll [label=" lock", dir=none];
removeAll -> size [label=" lock", dir=none];
removeAll -> addAll [label=" lock", dir=none];
removeAll -> hashCode [label=" lock", dir=none];
removeAll -> equals [label=" lock", dir=none];
removeAll -> toArray [label=" lock", dir=none];
removeAll -> toString [label=" lock", dir=none];
removeAll -> retainAll [label=" lock", dir=none];
size -> addAll [label=" lock", dir=none];
size -> hashCode [label=" lock", dir=none];
size -> equals [label=" lock", dir=none];
size -> toArray [label=" lock", dir=none];
size -> toString [label=" lock", dir=none];
size -> retainAll [label=" lock", dir=none];
addAll -> hashCode [label=" lock", dir=none];
addAll -> equals [label=" lock", dir=none];
addAll -> toArray [label=" lock", dir=none];
addAll -> toString [label=" lock", dir=none];
addAll -> retainAll [label=" lock", dir=none];
hashCode -> equals [label=" lock", dir=none];
hashCode -> toArray [label=" lock", dir=none];
hashCode -> toString [label=" lock", dir=none];
hashCode -> retainAll [label=" lock", dir=none];
equals -> toArray [label=" lock", dir=none];
equals -> toString [label=" lock", dir=none];
equals -> retainAll [label=" lock", dir=none];
toArray -> toString [label=" lock", dir=none];
toArray -> retainAll [label=" lock", dir=none];
toString -> retainAll [label=" lock", dir=none];
}