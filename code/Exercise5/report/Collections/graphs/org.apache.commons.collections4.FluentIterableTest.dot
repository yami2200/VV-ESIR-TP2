digraph G {
asEnumeration;
appendIterable;
factoryMethodOf;
appendElements;
collateWithComparator;
skip;
allMatch;
transform;
iterator;
unmodifiable;
get;
limit;
toArray;
setUp;
anyMatch;
zip;
forEach;
copyInto;
isEmpty;
reverse;
filter;
collate;
contains;
eval;
size;
testToString;
unique;
zip -> filter [label=" iterableOdd", dir=none];
zip -> collate [label=" iterableEven, iterableOdd", dir=none];
zip -> contains [label=" iterableEven", dir=none];
zip -> eval [label=" iterableOdd", dir=none];
zip -> size [label=" iterableOdd", dir=none];
zip -> forEach [label=" iterableEven, iterableOdd", dir=none];
zip -> copyInto [label=" iterableOdd", dir=none];
zip -> unique [label=" iterableOdd", dir=none];
zip -> isEmpty [label=" iterableOdd", dir=none];
zip -> reverse [label=" iterableOdd", dir=none];
asEnumeration -> setUp [label=" iterableB", dir=none];
appendIterable -> zip [label=" iterableEven, iterableOdd", dir=none];
appendIterable -> factoryMethodOf [label=" emptyIterable, iterableOdd", dir=none];
appendIterable -> appendElements [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
appendIterable -> collateWithComparator [label=" iterableEven, iterableOdd", dir=none];
appendIterable -> forEach [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
appendIterable -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
appendIterable -> skip [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> allMatch [label=" iterableA, iterableEven, iterableOdd", dir=none];
appendIterable -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> collate [label=" iterableEven, iterableOdd", dir=none];
appendIterable -> transform [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> iterator [label=" iterableA", dir=none];
appendIterable -> contains [label=" iterableEven", dir=none];
appendIterable -> unmodifiable [label=" iterableA", dir=none];
appendIterable -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> size [label=" emptyIterable, iterableOdd", dir=none];
appendIterable -> testToString [label=" iterableA", dir=none];
appendIterable -> get [label=" emptyIterable, iterableEven, iterableOdd", dir=none];
appendIterable -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> limit [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendIterable -> setUp [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
appendIterable -> anyMatch [label=" iterableA, iterableEven, iterableOdd", dir=none];
factoryMethodOf -> zip [label=" iterableOdd", dir=none];
factoryMethodOf -> appendElements [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> collateWithComparator [label=" iterableOdd", dir=none];
factoryMethodOf -> forEach [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> copyInto [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> skip [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> reverse [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> allMatch [label=" iterableOdd", dir=none];
factoryMethodOf -> filter [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> collate [label=" iterableOdd", dir=none];
factoryMethodOf -> transform [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> eval [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> size [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> get [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> unique [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> limit [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> setUp [label=" emptyIterable, iterableOdd", dir=none];
factoryMethodOf -> anyMatch [label=" iterableOdd", dir=none];
appendElements -> zip [label=" iterableEven, iterableOdd", dir=none];
appendElements -> collateWithComparator [label=" iterableEven, iterableOdd", dir=none];
appendElements -> forEach [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
appendElements -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
appendElements -> skip [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> allMatch [label=" iterableA, iterableEven, iterableOdd", dir=none];
appendElements -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> collate [label=" iterableEven, iterableOdd", dir=none];
appendElements -> transform [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> iterator [label=" iterableA", dir=none];
appendElements -> contains [label=" iterableEven", dir=none];
appendElements -> unmodifiable [label=" iterableA", dir=none];
appendElements -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> size [label=" emptyIterable, iterableOdd", dir=none];
appendElements -> testToString [label=" iterableA", dir=none];
appendElements -> get [label=" emptyIterable, iterableEven, iterableOdd", dir=none];
appendElements -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> limit [label=" iterableA, emptyIterable, iterableOdd", dir=none];
appendElements -> setUp [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
appendElements -> anyMatch [label=" iterableA, iterableEven, iterableOdd", dir=none];
collateWithComparator -> zip [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> forEach [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> copyInto [label=" iterableOdd", dir=none];
collateWithComparator -> isEmpty [label=" iterableOdd", dir=none];
collateWithComparator -> skip [label=" iterableOdd", dir=none];
collateWithComparator -> reverse [label=" iterableOdd", dir=none];
collateWithComparator -> allMatch [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> filter [label=" iterableOdd", dir=none];
collateWithComparator -> collate [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> transform [label=" iterableOdd", dir=none];
collateWithComparator -> contains [label=" iterableEven", dir=none];
collateWithComparator -> eval [label=" iterableOdd", dir=none];
collateWithComparator -> size [label=" iterableOdd", dir=none];
collateWithComparator -> get [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> unique [label=" iterableOdd", dir=none];
collateWithComparator -> limit [label=" iterableOdd", dir=none];
collateWithComparator -> setUp [label=" iterableEven, iterableOdd", dir=none];
collateWithComparator -> anyMatch [label=" iterableEven, iterableOdd", dir=none];
forEach -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
forEach -> collate [label=" iterableEven, iterableOdd", dir=none];
forEach -> contains [label=" iterableEven", dir=none];
forEach -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
forEach -> size [label=" emptyIterable, iterableOdd", dir=none];
forEach -> testToString [label=" iterableA", dir=none];
forEach -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
forEach -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
forEach -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
forEach -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
copyInto -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
copyInto -> collate [label=" iterableOdd", dir=none];
copyInto -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
copyInto -> size [label=" emptyIterable, iterableOdd", dir=none];
copyInto -> testToString [label=" iterableA", dir=none];
copyInto -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
copyInto -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
copyInto -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
isEmpty -> filter [label=" emptyIterable, iterableOdd", dir=none];
isEmpty -> collate [label=" iterableOdd", dir=none];
isEmpty -> eval [label=" emptyIterable, iterableOdd", dir=none];
isEmpty -> size [label=" emptyIterable, iterableOdd", dir=none];
isEmpty -> unique [label=" emptyIterable, iterableOdd", dir=none];
isEmpty -> reverse [label=" emptyIterable, iterableOdd", dir=none];
skip -> zip [label=" iterableOdd", dir=none];
skip -> forEach [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
skip -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> allMatch [label=" iterableA, iterableOdd", dir=none];
skip -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> collate [label=" iterableOdd", dir=none];
skip -> transform [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> iterator [label=" iterableA", dir=none];
skip -> unmodifiable [label=" iterableA", dir=none];
skip -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> size [label=" emptyIterable, iterableOdd", dir=none];
skip -> testToString [label=" iterableA", dir=none];
skip -> get [label=" emptyIterable, iterableOdd", dir=none];
skip -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> limit [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> setUp [label=" iterableA, emptyIterable, iterableOdd", dir=none];
skip -> anyMatch [label=" iterableA, iterableOdd", dir=none];
reverse -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
reverse -> collate [label=" iterableOdd", dir=none];
reverse -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
reverse -> size [label=" emptyIterable, iterableOdd", dir=none];
reverse -> testToString [label=" iterableA", dir=none];
reverse -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
allMatch -> zip [label=" iterableEven, iterableOdd", dir=none];
allMatch -> forEach [label=" iterableA, iterableEven, iterableOdd", dir=none];
allMatch -> copyInto [label=" iterableA, iterableOdd", dir=none];
allMatch -> isEmpty [label=" iterableOdd", dir=none];
allMatch -> reverse [label=" iterableA, iterableOdd", dir=none];
allMatch -> filter [label=" iterableA, iterableOdd", dir=none];
allMatch -> collate [label=" iterableEven, iterableOdd", dir=none];
allMatch -> transform [label=" iterableA, iterableOdd", dir=none];
allMatch -> iterator [label=" iterableA", dir=none];
allMatch -> contains [label=" iterableEven", dir=none];
allMatch -> unmodifiable [label=" iterableA", dir=none];
allMatch -> eval [label=" iterableA, EVEN, iterableOdd", dir=none];
allMatch -> size [label=" iterableOdd", dir=none];
allMatch -> testToString [label=" iterableA", dir=none];
allMatch -> get [label=" iterableEven, iterableOdd", dir=none];
allMatch -> unique [label=" iterableA, iterableOdd", dir=none];
allMatch -> limit [label=" iterableA, iterableOdd", dir=none];
allMatch -> setUp [label=" iterableA, iterableEven, iterableOdd", dir=none];
allMatch -> anyMatch [label=" iterableA, EVEN, iterableEven, iterableOdd", dir=none];
filter -> collate [label=" iterableOdd", dir=none];
filter -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
filter -> size [label=" emptyIterable, iterableOdd", dir=none];
filter -> testToString [label=" iterableA", dir=none];
filter -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
collate -> contains [label=" iterableEven", dir=none];
collate -> eval [label=" iterableOdd", dir=none];
collate -> size [label=" iterableOdd", dir=none];
collate -> unique [label=" iterableOdd", dir=none];
transform -> zip [label=" iterableOdd", dir=none];
transform -> forEach [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
transform -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> collate [label=" iterableOdd", dir=none];
transform -> iterator [label=" iterableA", dir=none];
transform -> unmodifiable [label=" iterableA", dir=none];
transform -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> size [label=" emptyIterable, iterableOdd", dir=none];
transform -> testToString [label=" iterableA", dir=none];
transform -> get [label=" emptyIterable, iterableOdd", dir=none];
transform -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> limit [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> setUp [label=" iterableA, emptyIterable, iterableOdd", dir=none];
transform -> anyMatch [label=" iterableA, iterableOdd", dir=none];
iterator -> filter [label=" iterableA", dir=none];
iterator -> unmodifiable [label=" iterableA", dir=none];
iterator -> eval [label=" iterableA", dir=none];
iterator -> testToString [label=" iterableA", dir=none];
iterator -> forEach [label=" iterableA", dir=none];
iterator -> copyInto [label=" iterableA", dir=none];
iterator -> unique [label=" iterableA", dir=none];
iterator -> limit [label=" iterableA", dir=none];
iterator -> setUp [label=" iterableA", dir=none];
iterator -> reverse [label=" iterableA", dir=none];
iterator -> anyMatch [label=" iterableA", dir=none];
unmodifiable -> filter [label=" iterableA", dir=none];
unmodifiable -> eval [label=" iterableA", dir=none];
unmodifiable -> testToString [label=" iterableA", dir=none];
unmodifiable -> forEach [label=" iterableA", dir=none];
unmodifiable -> copyInto [label=" iterableA", dir=none];
unmodifiable -> unique [label=" iterableA", dir=none];
unmodifiable -> limit [label=" iterableA", dir=none];
unmodifiable -> setUp [label=" iterableA", dir=none];
unmodifiable -> reverse [label=" iterableA", dir=none];
unmodifiable -> anyMatch [label=" iterableA", dir=none];
eval -> size [label=" emptyIterable, iterableOdd", dir=none];
eval -> testToString [label=" iterableA", dir=none];
eval -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
size -> unique [label=" emptyIterable, iterableOdd", dir=none];
testToString -> unique [label=" iterableA", dir=none];
get -> zip [label=" iterableEven, iterableOdd", dir=none];
get -> forEach [label=" emptyIterable, iterableEven, iterableOdd", dir=none];
get -> copyInto [label=" emptyIterable, iterableOdd", dir=none];
get -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
get -> reverse [label=" emptyIterable, iterableOdd", dir=none];
get -> filter [label=" emptyIterable, iterableOdd", dir=none];
get -> collate [label=" iterableEven, iterableOdd", dir=none];
get -> contains [label=" iterableEven", dir=none];
get -> eval [label=" emptyIterable, iterableOdd", dir=none];
get -> size [label=" emptyIterable, iterableOdd", dir=none];
get -> unique [label=" emptyIterable, iterableOdd", dir=none];
get -> limit [label=" emptyIterable, iterableOdd", dir=none];
get -> setUp [label=" emptyIterable, iterableEven, iterableOdd", dir=none];
get -> anyMatch [label=" iterableEven, iterableOdd", dir=none];
limit -> zip [label=" iterableOdd", dir=none];
limit -> forEach [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
limit -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> collate [label=" iterableOdd", dir=none];
limit -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> size [label=" emptyIterable, iterableOdd", dir=none];
limit -> testToString [label=" iterableA", dir=none];
limit -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> setUp [label=" iterableA, emptyIterable, iterableOdd", dir=none];
limit -> anyMatch [label=" iterableA, iterableOdd", dir=none];
setUp -> zip [label=" iterableEven, iterableOdd", dir=none];
setUp -> forEach [label=" iterableA, emptyIterable, iterableEven, iterableOdd", dir=none];
setUp -> copyInto [label=" iterableA, emptyIterable, iterableOdd", dir=none];
setUp -> isEmpty [label=" emptyIterable, iterableOdd", dir=none];
setUp -> reverse [label=" iterableA, emptyIterable, iterableOdd", dir=none];
setUp -> filter [label=" iterableA, emptyIterable, iterableOdd", dir=none];
setUp -> collate [label=" iterableEven, iterableOdd", dir=none];
setUp -> contains [label=" iterableEven", dir=none];
setUp -> eval [label=" iterableA, emptyIterable, iterableOdd", dir=none];
setUp -> size [label=" emptyIterable, iterableOdd", dir=none];
setUp -> testToString [label=" iterableA", dir=none];
setUp -> unique [label=" iterableA, emptyIterable, iterableOdd", dir=none];
setUp -> anyMatch [label=" iterableA, iterableEven, iterableOdd", dir=none];
anyMatch -> zip [label=" iterableEven, iterableOdd", dir=none];
anyMatch -> filter [label=" iterableA, iterableOdd", dir=none];
anyMatch -> collate [label=" iterableEven, iterableOdd", dir=none];
anyMatch -> contains [label=" iterableEven", dir=none];
anyMatch -> eval [label=" iterableA, EVEN, iterableOdd", dir=none];
anyMatch -> size [label=" iterableOdd", dir=none];
anyMatch -> testToString [label=" iterableA", dir=none];
anyMatch -> forEach [label=" iterableA, iterableEven, iterableOdd", dir=none];
anyMatch -> copyInto [label=" iterableA, iterableOdd", dir=none];
anyMatch -> unique [label=" iterableA, iterableOdd", dir=none];
anyMatch -> isEmpty [label=" iterableOdd", dir=none];
anyMatch -> reverse [label=" iterableA, iterableOdd", dir=none];
}