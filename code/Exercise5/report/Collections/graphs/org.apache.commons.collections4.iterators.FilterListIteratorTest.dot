digraph G {
testThrees;
testNestedSixes3;
testFailingHasNextBug;
testCollections360;
testNestedSixes2;
testPreviousChangesNext;
testManual;
tearDown;
testTruePredicate;
testOdds;
testNestedSixes;
testNextChangesPrevious;
setUp;
testFalsePredicate;
testEvens;
testFours;
testWalkLists;
testThrees -> testNestedSixes3 [label=" list, threePred", dir=none];
testThrees -> testFailingHasNextBug [label=" list", dir=none];
testThrees -> testNestedSixes2 [label=" list, threePred", dir=none];
testThrees -> testPreviousChangesNext [label=" threes, list, threePred", dir=none];
testThrees -> testManual [label=" list, threePred", dir=none];
testThrees -> tearDown [label=" threes, list, threePred", dir=none];
testThrees -> testTruePredicate [label=" list", dir=none];
testThrees -> testOdds [label=" list", dir=none];
testThrees -> testNestedSixes [label=" list, threePred", dir=none];
testThrees -> testNextChangesPrevious [label=" threes, list, threePred", dir=none];
testThrees -> setUp [label=" threes, list, threePred", dir=none];
testThrees -> testFalsePredicate [label=" list", dir=none];
testThrees -> testEvens [label=" list", dir=none];
testThrees -> testFours [label=" list", dir=none];
testThrees -> testWalkLists [label=" list", dir=none];
testNestedSixes3 -> testFailingHasNextBug [label=" list", dir=none];
testNestedSixes3 -> testNestedSixes2 [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes3 -> testPreviousChangesNext [label=" truePred, list, threePred", dir=none];
testNestedSixes3 -> testManual [label=" list, threePred", dir=none];
testNestedSixes3 -> tearDown [label=" truePred, sixes, evenPred, list, threePred", dir=none];
testNestedSixes3 -> testTruePredicate [label=" truePred, list", dir=none];
testNestedSixes3 -> testOdds [label=" list", dir=none];
testNestedSixes3 -> testNestedSixes [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes3 -> testNextChangesPrevious [label=" truePred, list, threePred", dir=none];
testNestedSixes3 -> setUp [label=" truePred, sixes, evenPred, list, threePred", dir=none];
testNestedSixes3 -> testFalsePredicate [label=" list", dir=none];
testNestedSixes3 -> testEvens [label=" evenPred, list", dir=none];
testNestedSixes3 -> testFours [label=" list", dir=none];
testNestedSixes3 -> testWalkLists [label=" list", dir=none];
testFailingHasNextBug -> testNestedSixes2 [label=" list", dir=none];
testFailingHasNextBug -> testPreviousChangesNext [label=" list", dir=none];
testFailingHasNextBug -> testManual [label=" list", dir=none];
testFailingHasNextBug -> tearDown [label=" fourPred, list, fours", dir=none];
testFailingHasNextBug -> testTruePredicate [label=" list", dir=none];
testFailingHasNextBug -> testOdds [label=" list", dir=none];
testFailingHasNextBug -> testNestedSixes [label=" list", dir=none];
testFailingHasNextBug -> testNextChangesPrevious [label=" list", dir=none];
testFailingHasNextBug -> setUp [label=" fourPred, list, fours", dir=none];
testFailingHasNextBug -> testFalsePredicate [label=" list", dir=none];
testFailingHasNextBug -> testEvens [label=" list", dir=none];
testFailingHasNextBug -> testFours [label=" fourPred, list, fours", dir=none];
testFailingHasNextBug -> testWalkLists [label=" list", dir=none];
testNestedSixes2 -> testTruePredicate [label=" list", dir=none];
testNestedSixes2 -> testOdds [label=" list", dir=none];
testNestedSixes2 -> testNestedSixes [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes2 -> testPreviousChangesNext [label=" list, threePred", dir=none];
testNestedSixes2 -> testNextChangesPrevious [label=" list, threePred", dir=none];
testNestedSixes2 -> testManual [label=" list, threePred", dir=none];
testNestedSixes2 -> setUp [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes2 -> testFalsePredicate [label=" list", dir=none];
testNestedSixes2 -> testEvens [label=" evenPred, list", dir=none];
testNestedSixes2 -> testFours [label=" list", dir=none];
testNestedSixes2 -> tearDown [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes2 -> testWalkLists [label=" list", dir=none];
testPreviousChangesNext -> testTruePredicate [label=" truePred, list", dir=none];
testPreviousChangesNext -> testOdds [label=" list", dir=none];
testPreviousChangesNext -> testNestedSixes [label=" list, threePred", dir=none];
testPreviousChangesNext -> testNextChangesPrevious [label=" threes, truePred, list, threePred", dir=none];
testPreviousChangesNext -> testManual [label=" list, threePred", dir=none];
testPreviousChangesNext -> setUp [label=" threes, truePred, list, threePred", dir=none];
testPreviousChangesNext -> testFalsePredicate [label=" list", dir=none];
testPreviousChangesNext -> testEvens [label=" list", dir=none];
testPreviousChangesNext -> testFours [label=" list", dir=none];
testPreviousChangesNext -> tearDown [label=" threes, truePred, list, threePred", dir=none];
testPreviousChangesNext -> testWalkLists [label=" list", dir=none];
testManual -> testTruePredicate [label=" list", dir=none];
testManual -> testOdds [label=" list", dir=none];
testManual -> testNestedSixes [label=" list, threePred", dir=none];
testManual -> testNextChangesPrevious [label=" list, threePred", dir=none];
testManual -> setUp [label=" list, threePred", dir=none];
testManual -> testFalsePredicate [label=" list", dir=none];
testManual -> testEvens [label=" list", dir=none];
testManual -> testFours [label=" list", dir=none];
testManual -> tearDown [label=" list, threePred", dir=none];
testManual -> testWalkLists [label=" list", dir=none];
tearDown -> testTruePredicate [label=" truePred, list", dir=none];
tearDown -> testOdds [label=" odds, list, oddPred", dir=none];
tearDown -> testNestedSixes [label=" sixes, evenPred, list, threePred", dir=none];
tearDown -> testNextChangesPrevious [label=" threes, truePred, list, threePred", dir=none];
tearDown -> setUp [label=" threes, truePred, sixes, odds, evenPred, fourPred, list, fours, falsePred, threePred, evens, oddPred", dir=none];
tearDown -> testFalsePredicate [label=" list, falsePred", dir=none];
tearDown -> testEvens [label=" evenPred, list, evens", dir=none];
tearDown -> testFours [label=" fourPred, list, fours", dir=none];
tearDown -> testWalkLists [label=" list", dir=none];
testTruePredicate -> testOdds [label=" list", dir=none];
testTruePredicate -> testNestedSixes [label=" list", dir=none];
testTruePredicate -> testNextChangesPrevious [label=" truePred, list", dir=none];
testTruePredicate -> setUp [label=" truePred, list", dir=none];
testTruePredicate -> testFalsePredicate [label=" list", dir=none];
testTruePredicate -> testEvens [label=" list", dir=none];
testTruePredicate -> testFours [label=" list", dir=none];
testTruePredicate -> testWalkLists [label=" list", dir=none];
testOdds -> testNestedSixes [label=" list", dir=none];
testOdds -> testNextChangesPrevious [label=" list", dir=none];
testOdds -> setUp [label=" odds, list, oddPred", dir=none];
testOdds -> testFalsePredicate [label=" list", dir=none];
testOdds -> testEvens [label=" list", dir=none];
testOdds -> testFours [label=" list", dir=none];
testOdds -> testWalkLists [label=" list", dir=none];
testNestedSixes -> testNextChangesPrevious [label=" list, threePred", dir=none];
testNestedSixes -> setUp [label=" sixes, evenPred, list, threePred", dir=none];
testNestedSixes -> testFalsePredicate [label=" list", dir=none];
testNestedSixes -> testEvens [label=" evenPred, list", dir=none];
testNestedSixes -> testFours [label=" list", dir=none];
testNestedSixes -> testWalkLists [label=" list", dir=none];
testNextChangesPrevious -> setUp [label=" threes, truePred, list, threePred", dir=none];
testNextChangesPrevious -> testFalsePredicate [label=" list", dir=none];
testNextChangesPrevious -> testEvens [label=" list", dir=none];
testNextChangesPrevious -> testFours [label=" list", dir=none];
testNextChangesPrevious -> testWalkLists [label=" list", dir=none];
setUp -> testFalsePredicate [label=" list, falsePred", dir=none];
setUp -> testEvens [label=" evenPred, list, evens", dir=none];
setUp -> testFours [label=" fourPred, list, fours", dir=none];
setUp -> testWalkLists [label=" list", dir=none];
testFalsePredicate -> testEvens [label=" list", dir=none];
testFalsePredicate -> testFours [label=" list", dir=none];
testFalsePredicate -> testWalkLists [label=" list", dir=none];
testEvens -> testFours [label=" list", dir=none];
testEvens -> testWalkLists [label=" list", dir=none];
testFours -> testWalkLists [label=" list", dir=none];
}