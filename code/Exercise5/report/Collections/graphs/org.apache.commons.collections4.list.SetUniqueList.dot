digraph G {
add;
setUniqueList;
subList;
set;
containsAll;
clear;
remove;
removeIf;
removeAll;
contains;
iterator;
addAll;
listIterator;
asSet;
retainAll;
add -> setUniqueList [label=" set", dir=none];
add -> subList [label=" set", dir=none];
add -> set [label=" set", dir=none];
add -> containsAll [label=" set", dir=none];
add -> clear [label=" set", dir=none];
add -> remove [label=" set", dir=none];
add -> removeIf [label=" set", dir=none];
add -> removeAll [label=" set", dir=none];
add -> contains [label=" set", dir=none];
add -> iterator [label=" set", dir=none];
add -> addAll [label=" set", dir=none];
add -> listIterator [label=" set", dir=none];
add -> asSet [label=" set", dir=none];
add -> retainAll [label=" set", dir=none];
setUniqueList -> subList [label=" set", dir=none];
setUniqueList -> set [label=" set", dir=none];
setUniqueList -> containsAll [label=" set", dir=none];
setUniqueList -> clear [label=" set", dir=none];
setUniqueList -> remove [label=" set", dir=none];
setUniqueList -> removeIf [label=" set", dir=none];
setUniqueList -> removeAll [label=" set", dir=none];
setUniqueList -> contains [label=" set", dir=none];
setUniqueList -> iterator [label=" set", dir=none];
setUniqueList -> addAll [label=" set", dir=none];
setUniqueList -> listIterator [label=" set", dir=none];
setUniqueList -> asSet [label=" set", dir=none];
setUniqueList -> retainAll [label=" set", dir=none];
subList -> removeAll [label=" set", dir=none];
subList -> contains [label=" set", dir=none];
subList -> iterator [label=" set", dir=none];
subList -> set [label=" set", dir=none];
subList -> addAll [label=" set", dir=none];
subList -> containsAll [label=" set", dir=none];
subList -> clear [label=" set", dir=none];
subList -> listIterator [label=" set", dir=none];
subList -> asSet [label=" set", dir=none];
subList -> remove [label=" set", dir=none];
subList -> removeIf [label=" set", dir=none];
subList -> retainAll [label=" set", dir=none];
set -> removeAll [label=" set", dir=none];
set -> contains [label=" set", dir=none];
set -> iterator [label=" set", dir=none];
set -> addAll [label=" set", dir=none];
set -> containsAll [label=" set", dir=none];
set -> clear [label=" set", dir=none];
set -> listIterator [label=" set", dir=none];
set -> asSet [label=" set", dir=none];
set -> remove [label=" set", dir=none];
set -> removeIf [label=" set", dir=none];
set -> retainAll [label=" set", dir=none];
containsAll -> removeAll [label=" set", dir=none];
containsAll -> contains [label=" set", dir=none];
containsAll -> iterator [label=" set", dir=none];
containsAll -> addAll [label=" set", dir=none];
containsAll -> clear [label=" set", dir=none];
containsAll -> listIterator [label=" set", dir=none];
containsAll -> asSet [label=" set", dir=none];
containsAll -> remove [label=" set", dir=none];
containsAll -> removeIf [label=" set", dir=none];
containsAll -> retainAll [label=" set", dir=none];
clear -> removeAll [label=" set", dir=none];
clear -> contains [label=" set", dir=none];
clear -> iterator [label=" set", dir=none];
clear -> addAll [label=" set", dir=none];
clear -> listIterator [label=" set", dir=none];
clear -> asSet [label=" set", dir=none];
clear -> remove [label=" set", dir=none];
clear -> removeIf [label=" set", dir=none];
clear -> retainAll [label=" set", dir=none];
remove -> removeAll [label=" set", dir=none];
remove -> contains [label=" set", dir=none];
remove -> iterator [label=" set", dir=none];
remove -> addAll [label=" set", dir=none];
remove -> listIterator [label=" set", dir=none];
remove -> asSet [label=" set", dir=none];
remove -> removeIf [label=" set", dir=none];
remove -> retainAll [label=" set", dir=none];
removeIf -> removeAll [label=" set", dir=none];
removeIf -> contains [label=" set", dir=none];
removeIf -> iterator [label=" set", dir=none];
removeIf -> addAll [label=" set", dir=none];
removeIf -> listIterator [label=" set", dir=none];
removeIf -> asSet [label=" set", dir=none];
removeIf -> retainAll [label=" set", dir=none];
removeAll -> contains [label=" set", dir=none];
removeAll -> iterator [label=" set", dir=none];
removeAll -> addAll [label=" set", dir=none];
removeAll -> listIterator [label=" set", dir=none];
removeAll -> asSet [label=" set", dir=none];
removeAll -> retainAll [label=" set", dir=none];
contains -> iterator [label=" set", dir=none];
contains -> addAll [label=" set", dir=none];
contains -> listIterator [label=" set", dir=none];
contains -> asSet [label=" set", dir=none];
contains -> retainAll [label=" set", dir=none];
iterator -> addAll [label=" set", dir=none];
iterator -> listIterator [label=" set", dir=none];
iterator -> asSet [label=" set", dir=none];
iterator -> retainAll [label=" set", dir=none];
addAll -> listIterator [label=" set", dir=none];
addAll -> asSet [label=" set", dir=none];
addAll -> retainAll [label=" set", dir=none];
listIterator -> asSet [label=" set", dir=none];
listIterator -> retainAll [label=" set", dir=none];
asSet -> retainAll [label=" set", dir=none];
}